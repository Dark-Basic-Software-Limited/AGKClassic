<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<title>Arithmetic, Relational, Boolean and Bitwise Operators - AGK Help</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<script type="text/javascript" src="../main.js"></script>
<link href="../main.css" rel="styleSheet" type="text/css" />
<link href="../prettify.css" rel="styleSheet" type="text/css" />
<script type="text/javascript" src="../prettify.js"></script>
<script type="text/javascript" src="../lang-agk.js"></script>
<link rel="stylesheet" href="../lightbox/css/lightbox.min.css">
<script src="../lightbox/js/lightbox-plus-jquery.min.js"></script>
<script src="../clipboard/clipboard.min.js"></script>
<script type="text/javascript" src="https://www.appgamekit.com/assets/js/docs-jquery.min.js"></script>
<script type="text/javascript" src="https://www.appgamekit.com/assets/js/docs-translate.js"></script>
</head>
<body>
<script>var clipboard = new Clipboard('.btn');
clipboard.on('success', function(e)
{
console.log(e);
});
clipboard.on('error', function(e)
{
console.log(e);
});
</script>
<div class="header" style="background: #000 url('../gfx/header-back.png') top center no-repeat;"><div><div class="navigation"><a href="../home.html"><img src="../gfx/b-home.png" width="76" height="44" alt=""></a><a href="javascript:history.go(-1)"><img src="../gfx/b-back.png" width="71" height="44" alt=""></a><a href="javascript:window.print()"><img src="../gfx/b-print.png" width="75" height="44" alt=""></a><a style="cursor:pointer;" onclick="ToggleCPP()"><img src="../gfx/lang-c.png" width="253" height="44" alt=""  id="basicCodeBlock0" border="0"></a><a style="cursor:pointer;" onclick="ToggleCPP()"><img src="../gfx/lang-basic.png" width="253" height="44" alt=""  id="cppCodeBlock0" style="display:none" border="0"></a></div><a href="https://www.appgamekit.com" target="_blank"><img class="logo" src="../gfx/agk-logo.png" height="44" style="margin:15px 0" alt="App Game Kit" border="0"></a></div><img src="../gfx/drop-shadow.png" width="1158" height="40" alt=""></div><div class="breadcrumbs">
<a href="../home.html">Home</a> &gt; <a href="../principles.html">Principles</a> &gt; Arithmetic, Relational, Boolean and Bitwise Operators</div><div class="page"><h1>Arithmetic, Relational, Boolean and Bitwise Operators</h1><p>We have already used one type of well-known operator in the preceding examples. Operators are the term given to a mathematical symbol used in all calculations. The most common operators are arithmetic operators and are quickly identified. All operators require two operands of data that are placed on each side of the operator.</p><h2>Arithmetic Operators</h2><p>An arithmetic operator can represent an Addition, Subtraction, Multiplication or Division. These operators are represented symbolically as (+) (-) (*) (/) respectively.</p><p>The Plus(+) sign specifies that the data on the right of the plus sign must be added to the data on the left. Examples of which you have already seen are:</p><div id="basicCodeBlock1" style="border: 1px solid #ccd; background: #f3f3fc; margin: 10px 0;"><pre class="prettyprint lang-agk" style="margin:14px; font-size: 14px; white-space:pre-wrap;">3 + 4 equals 7
A + B equals the value of B added to the value of A
</pre></div><div align="right"><button class="btn" data-clipboard-text="3 + 4 equals 7
A + B equals the value of B added to the value of A
">Copy Code</button></div><p>The minus(-) sign specifies that the data to the right of the minus sign must be subtracted from the data to the left of the minus sign:</p><div id="basicCodeBlock2" style="border: 1px solid #ccd; background: #f3f3fc; margin: 10px 0;"><pre class="prettyprint lang-agk" style="margin:14px; font-size: 14px; white-space:pre-wrap;">3 - 4 equals -1
A - B equals the value of B subtracted from the value of A
</pre></div><div align="right"><button class="btn" data-clipboard-text="3 - 4 equals -1
A - B equals the value of B subtracted from the value of A
">Copy Code</button></div><p>An asterix(*) specifies that the data on the right side of the asterix is multiplied by the data on the left side of the asterix:</p><div id="basicCodeBlock3" style="border: 1px solid #ccd; background: #f3f3fc; margin: 10px 0;"><pre class="prettyprint lang-agk" style="margin:14px; font-size: 14px; white-space:pre-wrap;">3 * 4 equals 12
A * B equals the value of B multiplied by the value of A
</pre></div><div align="right"><button class="btn" data-clipboard-text="3 * 4 equals 12
A * B equals the value of B multiplied by the value of A
">Copy Code</button></div><p>The slash(/) specifies that the data on the left side of the slash is to be divided by the data on the right side of the slash. Whether the data types are integer or real numbers play a factor:</p><div id="basicCodeBlock4" style="border: 1px solid #ccd; background: #f3f3fc; margin: 10px 0;"><pre class="prettyprint lang-agk" style="margin:14px; font-size: 14px; white-space:pre-wrap;">10 / 4 equals 2
A / B equals the integer value of A divided as an integer by the integer value of B
10 / 4.0 equals 2.5
A / B equals the real value of A divided as a real by the real value of B
</pre></div><div align="right"><button class="btn" data-clipboard-text="10 / 4 equals 2
A / B equals the integer value of A divided as an integer by the integer value of B
10 / 4.0 equals 2.5
A / B equals the real value of A divided as a real by the real value of B
">Copy Code</button></div><p>The MOD command specifies that first argument is to be divided by the second argument, and the remainder of the division is the result:</p><div id="basicCodeBlock5" style="border: 1px solid #ccd; background: #f3f3fc; margin: 10px 0;"><pre class="prettyprint lang-agk" style="margin:14px; font-size: 14px; white-space:pre-wrap;">Mod(11, 2) equals 1
Mod(A, B) equals the remainder of the division between A and B
</pre></div><div align="right"><button class="btn" data-clipboard-text="Mod(11, 2) equals 1
Mod(A, B) equals the remainder of the division between A and B
">Copy Code</button></div><p>The "Power" symbol specifies a result that is the left side value to the power of the right side value. For example 2^3 equates to the calculation 2*2*2, thus:</p><div id="basicCodeBlock6" style="border: 1px solid #ccd; background: #f3f3fc; margin: 10px 0;"><pre class="prettyprint lang-agk" style="margin:14px; font-size: 14px; white-space:pre-wrap;">2^3 equals 8
A ^ B equals A to the power B
</pre></div><div align="right"><button class="btn" data-clipboard-text="2^3 equals 8
A ^ B equals A to the power B
">Copy Code</button></div><h2>Relational Operators</h2><p>These operators are less common, unless you have programming experience. These operators represent conditions that are applied to data. The conditions handled are Equal To, Greater Than, Less Than, Greater or Equal To, Less or Equal To and Not Equal To. The purposes of these conditions are to determine the result of a comparison between two data values. A condition result can only be of two possible values. If the condition is false, the resulting value is zero. If the condition is true, the resulting value is one. Take the following examples:</p><div id="basicCodeBlock7" style="border: 1px solid #ccd; background: #f3f3fc; margin: 10px 0;"><pre class="prettyprint lang-agk" style="margin:14px; font-size: 14px; white-space:pre-wrap;">10 = 9 results in 0 because 10 is not the same as 9
10 = 10 results in 1 because 10 is the same as 10
10 > 9 results in 1 because 10 is greater than 9
100 >= 100 results in 1 because 100 is greater or equal to 100
</pre></div><div align="right"><button class="btn" data-clipboard-text="10 = 9 results in 0 because 10 is not the same as 9
10 = 10 results in 1 because 10 is the same as 10
10 > 9 results in 1 because 10 is greater than 9
100 >= 100 results in 1 because 100 is greater or equal to 100
">Copy Code</button></div><p>You can also have less than symbols which work just like the above greater-than symbols except that they will return the result of one if the left parameter is less than the right parameter. Using a less-than symbol, then a greater-than symbol next to each other denotes a not-equal operator, and will only return a true value of one if the parameters on either side are not the same value.</p><p>The same relational operators can be applied to real numbers, integer and real variables and in some case strings and string variables. You can compare whether two strings are the same or not the same, and even test whether one string is greater or less than another.</p><h2>Boolean Operators</h2><p>AGK allows you to use AND, OR, and NOT operators on your data. They are used when assembling multiple conditional expressions, such as:</p><div id="basicCodeBlock8" style="border: 1px solid #ccd; background: #f3f3fc; margin: 10px 0;"><pre class="prettyprint lang-agk" style="margin:14px; font-size: 14px; white-space:pre-wrap;">IF a=1 AND b=2 THEN c=3
IF a=1 OR b=2 THEN c=3
IF NOT b=2 THEN c=3
</pre></div><div align="right"><button class="btn" data-clipboard-text="IF a=1 AND b=2 THEN c=3
IF a=1 OR b=2 THEN c=3
IF NOT b=2 THEN c=3
">Copy Code</button></div><p>The AND operator works with any integer value, but for demonstration purposes the general rule applies when using this operator:</p><div id="basicCodeBlock9" style="border: 1px solid #ccd; background: #f3f3fc; margin: 10px 0;"><pre class="prettyprint lang-agk" style="margin:14px; font-size: 14px; white-space:pre-wrap;">0 AND 0 = 0
0 AND 1 = 0
1 AND 0 = 0
1 AND 1 = 1
</pre></div><div align="right"><button class="btn" data-clipboard-text="0 AND 0 = 0
0 AND 1 = 0
1 AND 0 = 0
1 AND 1 = 1
">Copy Code</button></div><p>What you see is the decision tree of the AND operator. It shows that the result will only be a 1 if both data operands of the AND operator are 1. Otherwise a 0 will be returned. To see how this logic works in reality, take the following example:</p><div id="basicCodeBlock10" style="border: 1px solid #ccd; background: #f3f3fc; margin: 10px 0;"><pre class="prettyprint lang-agk" style="margin:14px; font-size: 14px; white-space:pre-wrap;">A=5
B=25
(A > 10) AND (B > 20) so what is the resulting value?
</pre></div><div align="right"><button class="btn" data-clipboard-text="A=5
B=25
(A > 10) AND (B > 20) so what is the resulting value?
">Copy Code</button></div><p>We can determine the result of the parts enclosed in brackets first. We can see the relational operators provide us with the following results:</p><div id="basicCodeBlock11" style="border: 1px solid #ccd; background: #f3f3fc; margin: 10px 0;"><pre class="prettyprint lang-agk" style="margin:14px; font-size: 14px; white-space:pre-wrap;">(A > 10) results in 0 because 5 is not greater than 10
(B > 20) results in 1 because 25 is greater than 20
</pre></div><div align="right"><button class="btn" data-clipboard-text="(A > 10) results in 0 because 5 is not greater than 10
(B > 20) results in 1 because 25 is greater than 20
">Copy Code</button></div><p>Our updated calculation looks something like this:</p><div id="basicCodeBlock12" style="border: 1px solid #ccd; background: #f3f3fc; margin: 10px 0;"><pre class="prettyprint lang-agk" style="margin:14px; font-size: 14px; white-space:pre-wrap;">(0) AND (1) results in 0 as our table shows 0 AND 1 = 0
</pre></div><div align="right"><button class="btn" data-clipboard-text="(0) AND (1) results in 0 as our table shows 0 AND 1 = 0
">Copy Code</button></div><p>The logic of the table is that only when both sides of the AND operand are 1 will the result of the calculation be 1 also. What would happen if you change the value of A to 15?</p><p>The OR operator works in a similar fashion, but using the following table. If either the left side or right side has a value of 1, the result will be 1:</p><div id="basicCodeBlock13" style="border: 1px solid #ccd; background: #f3f3fc; margin: 10px 0;"><pre class="prettyprint lang-agk" style="margin:14px; font-size: 14px; white-space:pre-wrap;">0 OR 0 = 0
0 OR 1 = 1
1 OR 0 = 1
1 OR 1 = 1
</pre></div><div align="right"><button class="btn" data-clipboard-text="0 OR 0 = 0
0 OR 1 = 1
1 OR 0 = 1
1 OR 1 = 1
">Copy Code</button></div><p>The NOT operator works using the following table. This operator is a unary operator and only requires a single right-side value: </p><div id="basicCodeBlock14" style="border: 1px solid #ccd; background: #f3f3fc; margin: 10px 0;"><pre class="prettyprint lang-agk" style="margin:14px; font-size: 14px; white-space:pre-wrap;">IF NOT 0 THEN PRINT "this will print"
IF NOT 1 THEN PRINT "this will not print"
</pre></div><div align="right"><button class="btn" data-clipboard-text="IF NOT 0 THEN PRINT &quot;this will print&quot;
IF NOT 1 THEN PRINT &quot;this will not print&quot;
">Copy Code</button></div><h2>Bitwise Operators</h2><p>Bitwise operators, unlike boolean operators work on all the bits of the specified variable or value. There are six bitwise operators as follows:</p><div id="basicCodeBlock15" style="border: 1px solid #ccd; background: #f3f3fc; margin: 10px 0;"><pre class="prettyprint lang-agk" style="margin:14px; font-size: 14px; white-space:pre-wrap;">BITWISE LSHIFT using two less-than symbols shift bits 1 space to the left.
%0111 << 1 becomes %1110.
BITWISE RSHIFT using two greater-than symbols shift bits 1 space to the right.
%0111 >> 1 becomes %0011.
BITWISE AND signified by the symbol && will AND all bits of one value with another.
%1111 && %0011 becomes %0011.
BITWISE OR signified by the symbol || will OR all bits of one value with another.
%1110 || %0011 becomes %1111.
BITWISE XOR signified by the symbol ~~ will XOR all bits of one value with another.
%1111 ~~ %0011 becomes %1100.
BITWISE NOT signified by the symbol ! will NOT all bits of the right value.
!%1010 becomes %0101.
</pre></div><div align="right"><button class="btn" data-clipboard-text="BITWISE LSHIFT using two less-than symbols shift bits 1 space to the left.
%0111 << 1 becomes %1110.
BITWISE RSHIFT using two greater-than symbols shift bits 1 space to the right.
%0111 >> 1 becomes %0011.
BITWISE AND signified by the symbol && will AND all bits of one value with another.
%1111 && %0011 becomes %0011.
BITWISE OR signified by the symbol || will OR all bits of one value with another.
%1110 || %0011 becomes %1111.
BITWISE XOR signified by the symbol ~~ will XOR all bits of one value with another.
%1111 ~~ %0011 becomes %1100.
BITWISE NOT signified by the symbol ! will NOT all bits of the right value.
!%1010 becomes %0101.
">Copy Code</button></div><p>You will discover how useful these operators become when writing conditions for your programs. Being able to write conditions with multiple parts will become increasingly important as you begin to write more complex programs.</p><h2>XOR Truth Table</h2><div id="basicCodeBlock16" style="border: 1px solid #ccd; background: #f3f3fc; margin: 10px 0;"><pre class="prettyprint lang-agk" style="margin:14px; font-size: 14px; white-space:pre-wrap;">Input Output 
 A B 
 0 0    0
 1 0    1
 0 1    1
 1 1    0
</pre></div><div align="right"><button class="btn" data-clipboard-text="Input Output 
 A B 
 0 0    0
 1 0    1
 0 1    1
 1 1    0
">Copy Code</button></div><br><br></div><div class="footer" style="background: #000 url('../gfx/footer-back.png') top center no-repeat;"><div><p><a href="https://www.thegamecreators.com" target="_blank" style="float:none"><img style="float:right;margin-top:2px" src="../gfx/tgc-logo.png" width="188" height="27" alt="" border="0"></a><br><strong>App Game Kit</strong> &nbsp;&copy; The Game Creators Ltd. All Rights Reserved.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="mailto:agkreports@thegamecreators.com" style="float:none"><font color="FFFFFF">Report an issue</font></a></p></p></div></div><script type="text/javascript">prettyPrint(true);</script></body></html>