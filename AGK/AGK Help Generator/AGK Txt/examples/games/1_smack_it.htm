<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<title>Smack It - AGK Help</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<script type="text/javascript" src="../../main.js"></script>
<link href="../../main.css" rel="styleSheet" type="text/css" />
<link href="../../prettify.css" rel="styleSheet" type="text/css" />
<script type="text/javascript" src="../../prettify.js"></script>
<script type="text/javascript" src="../../lang-agk.js"></script>
<link rel="stylesheet" href="../lightbox/css/lightbox.min.css">
<script src="../lightbox/js/lightbox-plus-jquery.min.js"></script>
<script src="../clipboard/clipboard.min.js"></script>
<script type="text/javascript" src="https://www.appgamekit.com/assets/js/docs-jquery.min.js"></script>
<script type="text/javascript" src="https://www.appgamekit.com/assets/js/docs-translate.js"></script>
</head>
<body>
<script>var clipboard = new Clipboard('.btn');
clipboard.on('success', function(e)
{
console.log(e);
});
clipboard.on('error', function(e)
{
console.log(e);
});
</script>
<div class="header" style="background: #000 url('../../gfx/header-back.png') top center no-repeat;"><div><div class="navigation"><a href="../../home.html"><img src="../../gfx/b-home.png" width="76" height="44" alt=""></a><a href="javascript:history.go(-1)"><img src="../../gfx/b-back.png" width="71" height="44" alt=""></a><a href="javascript:window.print()"><img src="../../gfx/b-print.png" width="75" height="44" alt=""></a><a style="cursor:pointer;" onclick="ToggleCPP()"><img src="../../gfx/lang-c.png" width="253" height="44" alt=""  id="basicCodeBlock0" border="0"></a><a style="cursor:pointer;" onclick="ToggleCPP()"><img src="../../gfx/lang-basic.png" width="253" height="44" alt=""  id="cppCodeBlock0" style="display:none" border="0"></a></div><a href="https://www.appgamekit.com" target="_blank"><img class="logo" src="../../gfx/agk-logo.png" height="44" style="margin:15px 0" alt="App Game Kit" border="0"></a></div><img src="../../gfx/drop-shadow.png" width="1158" height="40" alt=""></div><div class="breadcrumbs">
<a href="../../home.html">Home</a> &gt; <a href="../../examples.html">Examples</a> &gt; Smack It</div><div class="page"><h1>Smack It</h1><h2>Description</h2><p>One of the first games that The Game Creators developed for mobile platforms was Smack It. This is a whack a mole game that managed to make it to number 1 in the family and kids charts on the iPhone in the US and UK. At the time AGK didn't exist, so the game was written using a mixture of C++, Objective C and OpenGL.</p><p>Now that AGK has arrived, as a test, it was decided to port a version of Smack It across to tier 1 and tier 2. Even though the logic and general structure remains the same in the original compared to the conversion, the actual development process has been simplified massively by using AGK and also brings the benefit of being able to run on multiple platforms.</p><p>This guide provides an overview of the code for tier 1 version of Smack It (using BASIC).</p><div align="center"><img src="1_smack_it.jpg"/></div><h2>Overview</h2><p>The main menu is the starting point for the game. This consists of a background, a start button and several animated entities being displayed on screen.</p><p>When the game starts a collection of moles pop up and down and the user must hit them to score points. As time progresses the game speeds up and it becomes more frantic and tests the players reaction skills.</p><p>Once the time for the level has elapsed a collection of statistics will be shown. If the player reaches a certain target they will win, if not they will lose.</p><p>The game is fairly simple to code, as there's nothing really complicated going on, it's mainly a case of animating some sprites and moving them around.</p><h2>Globals and types</h2><p>At the top of the source code is a collection of global variables and type listings.</p><p><i>sItem</i> is used to store information about a balloon that flies across the screen (the user can hit this to get a big bonus added to their score).</p><p>Another type is declared <i>sEnemy</i>. This is used for all the moles that pop up on the main menu and in game. It contains data such as sprite ID numbers and timers.</p><p><i>sLevel</i> is the final type. This contains everything related to a level such as the ID numbers of sprites, ID numbers of text, the current score, statistics and more. In this conversion of Smack It only 1 level is utilised, so it could be possible to have these variables outside of a type, however, it does help to encapsulate this data, especially if more levels were to be used in the future (like in the original game).</p><h2>Initial Set up</h2><p>Prior to entering the main loop a custom function <i>SetupMainMenu</i> is called. This function is responsible for setting up the main menu and getting its contents ready to be displayed on screen. It performs the following actions:</p><ul><li>Sets a virtual resolution of 320 x 480.</li><li>Loads an image for the background.</li><li>Loads an image for the foreground (to be placed at the bottom of the screen).</li><li>Loads the logo image.</li><li>Creates an empty sprite for the balloon that gets moved across the screen. This is followed by loading animation frames for the balloon and a puff of smoke that gets displayed when it is hit. These are all added into the sprite by using <i>AddSpriteAnimationFrame</i>. Finally the balloon sprite is positioned off screen.</li><li>3 moles will be placed on the main menu at the bottom of the screen. Their animation images are loaded and saved in a global array. The reason for this is that these images are reused in the main game.</li><li>The 3 mole sprites are created in a for loop and positioned at the bottom of the screen.</li><li>An overlay is loaded and placed at the bottom. This is used as a mask to ensure the moles are hidden before popping up.</li><li>3 cloud sprites are created and positioned - later in the main loop they will be moved across the screen.</li><li>Text is created and positioned on screen. The user can touch or click this text to start the game.</li><li>An overlay sprite is loaded that gets its size set so it fills the screen. This is used as a simple way of creating a fade in / out effect.</li><li>Finally music and sound is loaded.</li></ul><h2>Main loop</h2><p>The main loop consists of a simple <i>select</i> block based on the variable <i>g_State</i>. The seqeunce is fairly straightforward:</p><ul><li>0 = <i>DisplayFadeIn</i></li><li>1 = <i>DisplayMainContents</i></li><li>2 = <i>DisplayStartGame</i></li><li>3 = <i>LoadLevel</i></li><li>4 = <i>PlayLevel</i></li><li>5 = <i>HandlePause</i></li><li>6 = <i>HandleWin</i></li><li>7 = <i>HandleLose</i></li></ul><p>Initially <i>g_State</i> is 0 therefore <i>DisplayFadeIn</i> will be called first, which will handle a simple fade in transition. The state will then move to <i>DisplayMainContents</i>. At this point the game will wait until the user chooses to start the game and then it moves to  <i>DisplayStartGame</i>, <i>LoadLevel</i> and then <i>PlayLevel</i>. When the game is being played the state can move to <i>HandlePause</i> if the user chooses to pause the game and they can either resume the game or go back to the main menu (which begins at state 0). Once the game has finished either <i>HandleWin</i> or <i>HandleLose</i> is called and after this section has been displayed the state goes back to 0 and the main menu is displayed once again.</p><h2>The main menu</h2><p>The states relating to the main menu are 0, 1 and 2 that call <i>DisplayFadeIn</i>, <i>DisplayMainContents</i> and <i>DisplayStartGame</i>.</p><p>The function <i>DisplayFadeIn</i> will reduce the alpha of the overlay sprite until it reaches 0, at which point the state will change to 1. This overlay sprite covers the whole screen and is white, so reducing its alpha down to 0 creates a simple fade in effect.</p><p>The function <i>DisplayMainContents</i> will wait until the user presses the "Start" text on screen. When this happens the state will change to to 2.</p><p>The final function for the main menu is <i>DisplayStartGame</i>. This is very similar to <i>DisplayFadeIn</i>, except this time it's raising the alpha of the overlay back to full white. It also hides some text and moves the state onto 3 so that the level can be loaded. It would probably make sense to merge this function with <i>DisplayFadeIn</i> and have a parameter that controls whether the overlay fades in or out.</p><p>Notice that all these three functions call <i>UpdateItems</i>, <i>UpdateClouds</i> and <i>UpdateEnemies</i>. The first deals with the balloon moving across the screen, the second handles the clouds and the third is responsible for moles popping up.</p><p><i>UpdateItems</i> is used on the main menu and in the game as a way of moving a bonus sprite across the screen, when hitting this in game you get extra points added to your score. The original game had numerous items that would go across the screen, but for the conversion only a hot air balloon is used. The function will randomly launch the balloon from the left or right of the screen. As it moves across a check is made to see whether the user hits it and if so a smoke animation is played. Finally it gets reset so that it can be launched again.</p><p><i>UpdateClouds</i> simply moves the 3 clouds over to the left of the screen at varying speeds. Once they have gone past the screen they get placed back to the right of the screen so they can scroll back in.</p><p>The final function <i>UpdateEnemies</i> deals with the 3 moles popping up at the bottom of the screen. It checks whether all 3 moles are down and if so will release one of them. It will then cycle through the moles and update them based on their state. The final block of code checks whether a mole has been hit and if so plays a sound effect and changes the state of the mole.</p><h2>Loading the level</h2><p>When the user presses the "Start" button on the main menu the state switches to 3, which will call the function <i>LoadLevel</i>. This function handles the following:</p><ul><li>Loads a background image.</li><li>Loads a foreground image.</li><li>Loads pause and play icons.</li><li>Creates 9 enemy sprites that get palced on screen. The positions of these sprites are stored in an array rather than being calculated. Animation frames are added (from the images which were loaded earlier) and then the sprites depth is set dependent on its position. The depth is adjusted because 3 masks are used to cover each row of moles so they have a hiding place.</li><li>3 overlays are loaded and have their depths adjusted.</li><li>Several text entities get created to show score and time etc.</li><li>Finally some globals are set, which control the likes of time limits and targets.</li></ul><h2>Playing the game</h2><p>When the user enters the game from the main menu the function <i>PlayLevel</i> is called. In turn this function calls another set of functions:</p><ul><li>UpdateItems</li><li>UpdateEnemiesInGame</li><li>CheckForPause</li><li>CheckForInput</li><li>UpdateInfo</li><li>UpdateTime</li></ul><p>The <i>UpdateItems</i> function is the same as the one used in the main menu - it simply sets up the balloon moving across the top of the screen.</p><p><i>UpdateEnemiesInGame</i> is pretty much similar to <i>UpdateEnemies</i>. The alterations relate to the way an enemy is popped up and dealing with scoring. Probably a good option to merge these two functions and have a parameter to control the mode. Here's what this function does:</p><ul><li>Increments the level timer.</li><li>When the level timer is over the preset limit then a random list is generated.</li><li>A for loop cycles through the enemies (using the random list order) and finds an unused enemy, at this point it will force it to pop up. There's also a block of code that is used to speed up movement over time.</li><li>A for loop cycles through the 9 enemies on screen, checks their state and updates them accordingly.</li></ul><p>The <i>CheckForPause</i> function allows the user to pause the game by clicking or touching the pause button at the top left of the screen. If this happens the state of the game is switched so that <i>HandlePause</i> will be called.</p><p><i>CheckForInput</i> checks if the user hits or clicks the screen. When this happens we see if the user hit a mole or empty space. If they missed a mole a miss icon appears on screen and 5 seconds of time are lost. If they hit a mole the score is incremented by 5.</p><p>The <i>UpdateInfo</i> function updates the score and time display.</p><p>The final function call within <i>PlayLevel</i> is <i>UpdateTime</i>. This function will slowly reduce the time down from an initial 60 seconds to 0. When the time limit has been reached a check is made to see whether player has won or lost the game and based on this a new state is set.</p><h2>Pausing the game</h2><p>When the game is in a paused state the function <i>HandlePause</i> gets continually called. At this point the user can either continue the game or return to the menu by selecting the option on screen.</p><p>The initial state for pause (<i>g_PauseState</i>) will be 0 when the function is first called. There is a section of code that will display the "Continue" and "Main Menu" text options on screen. When there is input if the user pressed the pause / play button or the "Continue" text <i>g_PauseState</i> gets set to 1. If the user hits the "Main Menu" text then <i>g_PauseState</i> gets set to 2.</p><p>When <i>g_PauseState</i> is not 0 the "Continue" and "Main Menu" text will fade out, after which time action is taken to either return to the game or go to the main menu. If the user returns to the game it's a simple case of setting <i>g_State</i> back to <i>ePlayLevel</i>. Returning to the main menu is handled with a call to <i>UnloadLevel</i>, which will free all resources used by the level, followed by <i>g_State</i> being set to <i>eDisplayFadeIn</i> which results in returning to the main menu state.</p><h2>Winning or losing the game</h2><p>When the game is over either <i>HandleWin</i> or <i>HandleLose</i> gets called. These functions will display a bunch of statistics on screen, such as how many hit attempts were made, and then wait until the user touches the screen and then return to the main menu. The only difference between these functions is that one needs to show "Well Done" while the other must show "Game Over", so they are handled with a call to <i>EndLevel</i>, which takes a parameter allowing us to specify which text to display.</p><p>The <i>EndLevel</i> function has its own state stored in <i>g_GameOverState</i>. It does the following:</p><ul><li>0 = Move all enemies down and fade the balloon off (in case it's on screen). When all of this has finished set the state to 1.</li><li>1 = Hide the score and time text. Create a group of text entities and display them on screen showing the likes of the score, number of hit attempts etc. Then set the state to 2.</li><li>2 = Fade in all of the text and wait until the user performs input and then unload the level and return to the main menu.</li></ul><h2>Other functionality</h2><p>Logic for the moles is handled with a for loop, that checks the state and then calls one of:</p><ul><li><i>HandleEnemyUp</i> - Will move a mole out of its hole and up the screen, fading the mole in as this happens. When it reaches the top will switch to <i>HandleEnemyTop</i>.</li><li><i>HandleEnemyTop</i> - Will leave the mole at the top of the screen for a short while. When this delay is over the mole will move down by switching to <i>HandleEnemyDown</i>.</li><li><i>HandleEnemyDown</i> - Moves a mole back into its hole, and also fades the mole out. Once this process has finished the mole returns to a waiting state and can be selected to enter the level again.</li><li><i>HandleEnemyHit</i> - When the player hits a mole it gets moved down the screen slightly, turns red, plays its hit animation, and after a short while fades out. All of this is dealt with in <i>HandleEnemyHit</i>.</li></ul><h2>Conclusion</h2><p>Porting a basic version of Smack It to AGK turned out to be fairly easy and brings benefits such as simpler code (no need to deal with all the technical issues) and the ability to run on multiple platforms.</p><br><br></div><div class="footer" style="background: #000 url('../../gfx/footer-back.png') top center no-repeat;"><div><p><a href="https://www.thegamecreators.com" target="_blank" style="float:none"><img style="float:right;margin-top:2px" src="../../gfx/tgc-logo.png" width="188" height="27" alt="" border="0"></a><br><strong>App Game Kit</strong> &nbsp;&copy; The Game Creators Ltd. All Rights Reserved.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="mailto:agkreports@thegamecreators.com" style="float:none"><font color="FFFFFF">Report an issue</font></a></p></p></div></div><script type="text/javascript">prettyPrint(true);</script></body></html>