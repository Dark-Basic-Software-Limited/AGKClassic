<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<title>Joints - Part 1 - AGK Help</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<script type="text/javascript" src="../../main.js"></script>
<link href="../../main.css" rel="styleSheet" type="text/css" />
<link href="../../prettify.css" rel="styleSheet" type="text/css" />
<script type="text/javascript" src="../../prettify.js"></script>
<script type="text/javascript" src="../../lang-agk.js"></script>
<link rel="stylesheet" href="../lightbox/css/lightbox.min.css">
<script src="../lightbox/js/lightbox-plus-jquery.min.js"></script>
<script src="../clipboard/clipboard.min.js"></script>
<script type="text/javascript" src="https://www.appgamekit.com/assets/js/docs-jquery.min.js"></script>
<script type="text/javascript" src="https://www.appgamekit.com/assets/js/docs-translate.js"></script>
</head>
<body>
<script>var clipboard = new Clipboard('.btn');
clipboard.on('success', function(e)
{
console.log(e);
});
clipboard.on('error', function(e)
{
console.log(e);
});
</script>
<div class="header" style="background: #000 url('../../gfx/header-back.png') top center no-repeat;"><div><div class="navigation"><a href="../../home.html"><img src="../../gfx/b-home.png" width="76" height="44" alt=""></a><a href="javascript:history.go(-1)"><img src="../../gfx/b-back.png" width="71" height="44" alt=""></a><a href="javascript:window.print()"><img src="../../gfx/b-print.png" width="75" height="44" alt=""></a><a style="cursor:pointer;" onclick="ToggleCPP()"><img src="../../gfx/lang-c.png" width="253" height="44" alt=""  id="basicCodeBlock0" border="0"></a><a style="cursor:pointer;" onclick="ToggleCPP()"><img src="../../gfx/lang-basic.png" width="253" height="44" alt=""  id="cppCodeBlock0" style="display:none" border="0"></a></div><a href="https://www.appgamekit.com" target="_blank"><img class="logo" src="../../gfx/agk-logo.png" height="44" style="margin:15px 0" alt="App Game Kit" border="0"></a></div><img src="../../gfx/drop-shadow.png" width="1158" height="40" alt=""></div><div class="breadcrumbs">
<a href="../../home.html">Home</a> &gt; <a href="../../examples.html">Examples</a> &gt; Joints - Part 1</div><div class="page"><h1>Joints - Part 1</h1><h2>Description</h2><p>Joints are used as a way of making connections between sprites. At the most basic level this could mean attaching two sprites through the use of a weld joint. AGK provides support for several different kinds of joints including a distance joint, revolute joint, prismatic joint, pulley joint, mouse joint, line joint and weld joint.</p><p>This example demonstrates the use of a simple weld joint and the impact this makes on two sprites.</p><div align="center"><img src="6_joints1.jpg"/></div><h2>Overview</h2><p>The process involved is as follows:</p><ul><li>loading images</li><li>create two sprites, align them next to each other and turn physics on</li><li>weld the sprites together</li><li>repeat the process with another two sprites, placing them lower down the screen</li><li>make an obstacle so that when the sprites fall (due to gravity) we can see the impact of a collision</li></ul><h2>Loading images</h2><p>Two images are loaded, that can later be attached to the sprites:</p><div id="basicCodeBlock1" style="border: 1px solid #ccd; background: #f3f3fc; margin: 10px 0;"><pre class="prettyprint lang-agk" style="margin:14px; font-size: 14px; white-space:pre-wrap;">LoadImage ( 1, "green.png" )
LoadImage ( 2, "small_ball.png" )
</pre></div><div align="right"><button class="btn" data-clipboard-text="LoadImage ( 1, &quot;green.png&quot; )
LoadImage ( 2, &quot;small_ball.png&quot; )
">Copy Code</button></div><div id="cppCodeBlock2" style="display:none; border: 1px solid #ccd; background: #f3f3fc; margin: 10px 0;"><pre style="margin:14px; font-size: 14px; white-space:pre-wrap;" class="prettyprint lang-cpp">agk::LoadImage ( 1, "green.png" );
agk::LoadImage ( 2, "small_ball.png" );
</pre></div><h2>First set of sprites</h2><p>The first set of sprites will be created alongside each other at the top of the screen. Both of them will use the crate texture (ID 1) and have physics turned on (as dynamic objects):</p><div id="basicCodeBlock3" style="border: 1px solid #ccd; background: #f3f3fc; margin: 10px 0;"><pre class="prettyprint lang-agk" style="margin:14px; font-size: 14px; white-space:pre-wrap;">CreateSprite ( 1, 1 )
SetSpritePosition ( 1, 100, 0 )
SetSpritePhysicsOn ( 1, 2 )
<br>
CreateSprite ( 2, 1 )
SetSpritePosition ( 2, 164, 0 )
SetSpritePhysicsOn ( 2, 2 )
</pre></div><div align="right"><button class="btn" data-clipboard-text="CreateSprite ( 1, 1 )
SetSpritePosition ( 1, 100, 0 )
SetSpritePhysicsOn ( 1, 2 )

CreateSprite ( 2, 1 )
SetSpritePosition ( 2, 164, 0 )
SetSpritePhysicsOn ( 2, 2 )
">Copy Code</button></div><div id="cppCodeBlock4" style="display:none; border: 1px solid #ccd; background: #f3f3fc; margin: 10px 0;"><pre style="margin:14px; font-size: 14px; white-space:pre-wrap;" class="prettyprint lang-cpp">agk::CreateSprite ( 1, 1 )
agk::SetSpritePosition ( 1, 100.0f, 0.0f );
agk::SetSpritePhysicsOn ( 1, 2 );
<br>
agk::CreateSprite ( 2, 1 );
agk::SetSpritePosition ( 2, 164.0f, 0.0f );
agk::SetSpritePhysicsOn ( 2, 2 );
</pre></div><h2>Welding two sprites together</h2><p>By welding two sprites together we create a solid, invisible link that effectively transforms the two sprites into one single entity. The creation of a weld joint is handled with the command <i>CreateWeldJoint</i>. This command takes several parameters:</p><ul><li>sprite A</li><li>sprite B</li><li>x</li><li>y</li></ul><p>The first two parameters of this command refer to the sprites that are being welded together. The <i>X</i> and <i>Y</i> parameters control the anchor point of the weld. For most cases setting the anchor point to the centre point of both sprites makes sense.</p><p>For our example the previously created sprites with ID numbers of 1 and 2 will be connected, with the anchor point being the centre point of both sprites:</p><div id="basicCodeBlock5" style="border: 1px solid #ccd; background: #f3f3fc; margin: 10px 0;"><pre class="prettyprint lang-agk" style="margin:14px; font-size: 14px; white-space:pre-wrap;">CreateWeldJoint ( 1, 2, 164, 32 )
</pre></div><div align="right"><button class="btn" data-clipboard-text="CreateWeldJoint ( 1, 2, 164, 32 )
">Copy Code</button></div><div id="cppCodeBlock6" style="display:none; border: 1px solid #ccd; background: #f3f3fc; margin: 10px 0;"><pre style="margin:14px; font-size: 14px; white-space:pre-wrap;" class="prettyprint lang-cpp">agk::CreateWeldJoint ( 1, 2, 164.0f, 32.0f );
</pre></div><p>Both sprite 1 and sprite 2 use image 1 (the crate) which has dimensions of 64 x 64. These sprites are positioned directly alongside each other at 100, 0 and 164, 0. Therefore setting the <i>X</i> parameter to 164 results in the central point on the X axis between both sprites. Setting the <i>Y</i> paramter to 32 means the anchor point is halfway down and in the centre point on the Y axis. After calling <i>CreateWeldJoint</i> with the above parameters our sprites are connected at the anchor point.</p><p>The command <i>CreateWeldJoint</i> returns an ID number for the joint. This ID number can be used to edit properties of joints and also deleting the joint. For the purpose of this example it's not necessary to know and retain the ID, so the return value is ignored.</p><h2>More sprites</h2><p>Another two sprites will be created. These sprites will be placed further down the screen and below our previous sprites, they will not be connected by any joints:</p><div id="basicCodeBlock7" style="border: 1px solid #ccd; background: #f3f3fc; margin: 10px 0;"><pre class="prettyprint lang-agk" style="margin:14px; font-size: 14px; white-space:pre-wrap;">CreateSprite ( 3, 1 )
SetSpritePosition ( 3, 100, 140 )
SetSpritePhysicsOn ( 3, 2 )
<br>
CreateSprite ( 4, 1 )
SetSpritePosition ( 4, 164, 140 )
SetSpritePhysicsOn ( 4, 2 )
</pre></div><div align="right"><button class="btn" data-clipboard-text="CreateSprite ( 3, 1 )
SetSpritePosition ( 3, 100, 140 )
SetSpritePhysicsOn ( 3, 2 )

CreateSprite ( 4, 1 )
SetSpritePosition ( 4, 164, 140 )
SetSpritePhysicsOn ( 4, 2 )
">Copy Code</button></div><div id="cppCodeBlock8" style="display:none; border: 1px solid #ccd; background: #f3f3fc; margin: 10px 0;"><pre style="margin:14px; font-size: 14px; white-space:pre-wrap;" class="prettyprint lang-cpp">agk::CreateSprite ( 3, 1 );
agk::SetSpritePosition ( 3, 100.0f, 140.0f );
agk::SetSpritePhysicsOn ( 3, 2 );
<br>
agk::CreateSprite ( 4, 1 );
agk::SetSpritePosition ( 4, 164.0f, 140.0f );
agk::SetSpritePhysicsOn ( 4, 2 )
</pre></div><p>By creating these two sprites without a joint we can examine the difference between collisions on individual sprites and those attached with joints.</p><h2>An obstacle</h2><p>A static physics sprite will be created directly below both sets of sprites. This sprite is placed here so that the dynamically created sprites will collide with this obstacle. The sprite uses image 2 (the chip) and has its shape set to 1 so it's represented as a circle within the simulation. It is also set to be a static object. Here's the code:</p><div id="basicCodeBlock9" style="border: 1px solid #ccd; background: #f3f3fc; margin: 10px 0;"><pre class="prettyprint lang-agk" style="margin:14px; font-size: 14px; white-space:pre-wrap;">CreateSprite ( 5, 2 )
SetSpritePosition ( 5, 132, 250 )
SetSpritePhysicsOn ( 5, 1 )
SetSpriteShape ( 5, 1 )
</pre></div><div align="right"><button class="btn" data-clipboard-text="CreateSprite ( 5, 2 )
SetSpritePosition ( 5, 132, 250 )
SetSpritePhysicsOn ( 5, 1 )
SetSpriteShape ( 5, 1 )
">Copy Code</button></div><div id="cppCodeBlock10" style="display:none; border: 1px solid #ccd; background: #f3f3fc; margin: 10px 0;"><pre style="margin:14px; font-size: 14px; white-space:pre-wrap;" class="prettyprint lang-cpp">agk::CreateSprite ( 5, 2 );
agk::SetSpritePosition ( 5, 132.0f, 250.0f );
agk::SetSpritePhysicsOn ( 5, 1 );
agk::SetSpriteShape ( 5, 1 );
</pre></div><h2>Physics debug mode</h2><p>The final part before moving onto the main loop is a call to the command <i>SetPhysicsDebugOn</i>. After calling this command overlays will be placed on our sprites, which will help us to understand how the physics simulation represents our sprites:</p><div id="basicCodeBlock11" style="border: 1px solid #ccd; background: #f3f3fc; margin: 10px 0;"><pre class="prettyprint lang-agk" style="margin:14px; font-size: 14px; white-space:pre-wrap;">SetPhysicsDebugOn ( )
</pre></div><div align="right"><button class="btn" data-clipboard-text="SetPhysicsDebugOn ( )
">Copy Code</button></div><div id="cppCodeBlock12" style="display:none; border: 1px solid #ccd; background: #f3f3fc; margin: 10px 0;"><pre style="margin:14px; font-size: 14px; white-space:pre-wrap;" class="prettyprint lang-cpp">agk::SetPhysicsDebugOn ( );
</pre></div><h2>Main loop</h2><p>The only code required within our main loop is a call to <i>Sync</i> that will ensure the screen is updated. Nothing else needs to happen, we'll let the simulation play itself out and view the results on screen:</p><div id="basicCodeBlock13" style="border: 1px solid #ccd; background: #f3f3fc; margin: 10px 0;"><pre class="prettyprint lang-agk" style="margin:14px; font-size: 14px; white-space:pre-wrap;">do
    Sync ( )
loop
</pre></div><div align="right"><button class="btn" data-clipboard-text="do
    Sync ( )
loop
">Copy Code</button></div><div id="cppCodeBlock14" style="display:none; border: 1px solid #ccd; background: #f3f3fc; margin: 10px 0;"><pre style="margin:14px; font-size: 14px; white-space:pre-wrap;" class="prettyprint lang-cpp">void app::Loop ( void )
{
    agk::Sync ( );
}
</pre></div><h2>Full code listing</h2><p>The final code for our program is as follows:</p><div id="basicCodeBlock15" style="border: 1px solid #ccd; background: #f3f3fc; margin: 10px 0;"><pre class="prettyprint lang-agk" style="margin:14px; font-size: 14px; white-space:pre-wrap;">SetVirtualResolution ( 320, 480 )
<br>
CreateSprite ( LoadImage ( "background3.jpg" ) )
<br>
LoadImage ( 1, "green.png" )
LoadImage ( 2, "small_ball.png" )
<br>
CreateSprite ( 1, 1 )
SetSpritePosition ( 1, 100, 0 )
SetSpritePhysicsOn ( 1, 2 )
<br>
CreateSprite ( 2, 1 )
SetSpritePosition ( 2, 164, 0 )
SetSpritePhysicsOn ( 2, 2 )
<br>
CreateWeldJoint ( 1, 2, 164, 32 )
<br>
CreateSprite ( 3, 1 )
SetSpritePosition ( 3, 100, 140 )
SetSpritePhysicsOn ( 3, 2 )
<br>
CreateSprite ( 4, 1 )
SetSpritePosition ( 4, 164, 140 )
SetSpritePhysicsOn ( 4, 2 )
<br>
CreateSprite ( 5, 2 )
SetSpritePosition ( 5, 132, 250 )
SetSpritePhysicsOn ( 5, 1 )
SetSpriteShape ( 5, 1 )
<br>
SetPhysicsDebugOn ( )
<br>
do
    Sync ( )
loop
</pre></div><div align="right"><button class="btn" data-clipboard-text="SetVirtualResolution ( 320, 480 )

CreateSprite ( LoadImage ( &quot;background3.jpg&quot; ) )

LoadImage ( 1, &quot;green.png&quot; )
LoadImage ( 2, &quot;small_ball.png&quot; )

CreateSprite ( 1, 1 )
SetSpritePosition ( 1, 100, 0 )
SetSpritePhysicsOn ( 1, 2 )

CreateSprite ( 2, 1 )
SetSpritePosition ( 2, 164, 0 )
SetSpritePhysicsOn ( 2, 2 )

CreateWeldJoint ( 1, 2, 164, 32 )

CreateSprite ( 3, 1 )
SetSpritePosition ( 3, 100, 140 )
SetSpritePhysicsOn ( 3, 2 )

CreateSprite ( 4, 1 )
SetSpritePosition ( 4, 164, 140 )
SetSpritePhysicsOn ( 4, 2 )

CreateSprite ( 5, 2 )
SetSpritePosition ( 5, 132, 250 )
SetSpritePhysicsOn ( 5, 1 )
SetSpriteShape ( 5, 1 )

SetPhysicsDebugOn ( )

do
    Sync ( )
loop
">Copy Code</button></div><div id="cppCodeBlock16" style="display:none; border: 1px solid #ccd; background: #f3f3fc; margin: 10px 0;"><pre style="margin:14px; font-size: 14px; white-space:pre-wrap;" class="prettyprint lang-cpp">void app::Begin ( void )
{
    agk::SetVirtualResolution ( 320, 480 );
    <br>
    agk::CreateSprite ( agk::LoadImage ( "background3.jpg" ) );
    <br>
    agk::LoadImage ( 1, "green.png" );
    agk::LoadImage ( 2, "small_ball.png" );
    <br>
    agk::CreateSprite ( 1, 1 )
    agk::SetSpritePosition ( 1, 100.0f, 0.0f );
    agk::SetSpritePhysicsOn ( 1, 2 );
    <br>
    agk::CreateSprite ( 2, 1 );
    agk::SetSpritePosition ( 2, 164.0f, 0.0f );
    agk::SetSpritePhysicsOn ( 2, 2 );
    <br>
    agk::CreateWeldJoint ( 1, 2, 164.0f, 32.0f );
    <br>
    agk::CreateSprite ( 3, 1 );
    agk::SetSpritePosition ( 3, 100.0f, 140.0f );
    agk::SetSpritePhysicsOn ( 3, 2 );
    <br>
    agk::CreateSprite ( 4, 1 );
    agk::SetSpritePosition ( 4, 164.0f, 140.0f );
    agk::SetSpritePhysicsOn ( 4, 2 )
    <br>
    agk::CreateSprite ( 5, 2 );
    agk::SetSpritePosition ( 5, 132.0f, 250.0f );
    agk::SetSpritePhysicsOn ( 5, 1 );
    agk::SetSpriteShape ( 5, 1 );
    <br>
    agk::SetPhysicsDebugOn ( );
}
<br>
void app::Loop ( void )
{
    agk::Sync ( );
}
</pre></div><h2>Conclusion</h2><p>When you run the program notice how the sprites collision response is different. The two sprites connected with a weld joint act as one, whereas the second set of sprites act individually. Through the use of joints it's possible to create all kinds of interesting scenarios. While this particular example is simple it should give you some kind of insight into what might be possible with joints.</p><br><br></div><div class="footer" style="background: #000 url('../../gfx/footer-back.png') top center no-repeat;"><div><p><a href="https://www.thegamecreators.com" target="_blank" style="float:none"><img style="float:right;margin-top:2px" src="../../gfx/tgc-logo.png" width="188" height="27" alt="" border="0"></a><br><strong>App Game Kit</strong> &nbsp;&copy; The Game Creators Ltd. All Rights Reserved.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="mailto:agkreports@thegamecreators.com" style="float:none"><font color="FFFFFF">Report an issue</font></a></p></p></div></div><script type="text/javascript">prettyPrint(true);</script></body></html>