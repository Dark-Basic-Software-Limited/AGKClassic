_header
Gravity

_sheader
Description
_text
All physics enabled sprites can be affected by a global gravity property. This property can be used to define whether sprites get pulled to the ground quickly, pulled upwards or even to the side.

_text
The example creates five dynamic sprites that are placed alongside each other. The global gravitational force is then set to 10 on the X axis and 10 on the Y axis. This has the effect of pulling all our sprites to the right of the screen and downwards.

_image
4_gravity.jpg

_sheader
Overview
_text
The process involved is as follows:

_listbegin
create our sprites and set their dynamic or static states
turn physics on for the sprites
set gravity
within the main loop simply update the contents of the screen
_listend

_sheader
Creating the sprites
_text
One image is loaded, which is used by five sprites that are all laid out alongside each other:

_tier1
LoadImage ( 1, "small_silver.png" )
<br>
CreateSprite ( 1, 1 )
CreateSprite ( 2, 1 )
CreateSprite ( 3, 1 )
CreateSprite ( 4, 1 )
CreateSprite ( 5, 1 )
<br>
SetSpritePosition ( 1,   0, 0 )
SetSpritePosition ( 2,  50, 0 )
SetSpritePosition ( 3, 100, 0 )
SetSpritePosition ( 4, 150, 0 )
SetSpritePosition ( 5, 200, 0 )
_tier1

_tier2
agk::LoadImage ( 1, "small_silver.png" );
<br>
agk::CreateSprite ( 1, 1 );
agk::CreateSprite ( 2, 1 );
agk::CreateSprite ( 3, 1 );
agk::CreateSprite ( 4, 1 );
agk::CreateSprite ( 5, 1 );
<br>
agk::SetSpritePosition ( 1,   0, 0 );
agk::SetSpritePosition ( 2,  50, 0 );
agk::SetSpritePosition ( 3, 100, 0 );
agk::SetSpritePosition ( 4, 150, 0 );
agk::SetSpritePosition ( 5, 200, 0 );
_tier2

_sheader
Switching physics on
_text
All five sprites have physics enabled:

_tier1
SetSpritePhysicsOn ( 1, 2 )
SetSpritePhysicsOn ( 2, 2 )
SetSpritePhysicsOn ( 3, 2 )
SetSpritePhysicsOn ( 4, 2 )
SetSpritePhysicsOn ( 5, 2 )
_tier1

_tier2
agk::SetSpritePhysicsOn ( 1, 2 );
agk::SetSpritePhysicsOn ( 2, 2 );
agk::SetSpritePhysicsOn ( 3, 2 );
agk::SetSpritePhysicsOn ( 4, 2 );
agk::SetSpritePhysicsOn ( 5, 2 );
_tier2

_sheader
Gravity
_text
Gravity is applied with the function SetPhysicsGravity. This function takes two parameters. The first parameter controls the gravitational force on the X axis, while the second parameter deals with gravity on the Y axis. Whatever values are set here get applied to all your physics enabled sprites. In this example gravity is set to 10 on the X and Y axis:

_tier1
SetPhysicsGravity ( 10, 10 )
_tier1

_tier2
agk::SetPhysicsGravity ( 10, 10 );
_tier2

_sheader
Main loop
_text
The main loop in this example does not take any action. All it needs to do is make a call to <i>Sync</i> to ensure the screen is updated.

_tier1
do
    Sync ( )
loop
_tier1

_tier2
void app::Loop ( void )
{
    agk::Sync ( );
}
_tier2

_sheader
Full code listing

_text
The final code listing carries out the tasks mentioned above as well as providing a background image:

_tier1
SetVirtualResolution ( 320, 480 )
<br>
CreateSprite ( LoadImage ( "background4.jpg" ) )
<br>
LoadImage ( 1, "small_silver.png" )
<br>
CreateSprite ( 1, 1 )
CreateSprite ( 2, 1 )
CreateSprite ( 3, 1 )
CreateSprite ( 4, 1 )
CreateSprite ( 5, 1 )
<br>
SetSpritePosition ( 1,   0, 0 )
SetSpritePosition ( 2,  50, 0 )
SetSpritePosition ( 3, 100, 0 )
SetSpritePosition ( 4, 150, 0 )
SetSpritePosition ( 5, 200, 0 )
<br>
SetSpritePhysicsOn ( 1, 2 )
SetSpritePhysicsOn ( 2, 2 )
SetSpritePhysicsOn ( 3, 2 )
SetSpritePhysicsOn ( 4, 2 )
SetSpritePhysicsOn ( 5, 2 )
<br>
SetPhysicsGravity ( 10, 10 )
<br>
do
    Sync ( )
loop
_tier1

_tier2
void app::Begin ( void )
{
    agk::SetVirtualResolution ( 320, 480 );
<br>
    agk::CreateSprite ( agk::LoadImage ( "background4.jpg" ) );
<br>
    agk::LoadImage ( 1, "small_silver.png" );
<br>
    agk::CreateSprite ( 1, 1 );
    agk::CreateSprite ( 2, 1 );
    agk::CreateSprite ( 3, 1 );
    agk::CreateSprite ( 4, 1 );
    agk::CreateSprite ( 5, 1 );
<br>
    agk::SetSpritePosition ( 1,   0, 0 );
    agk::SetSpritePosition ( 2,  50, 0 );
    agk::SetSpritePosition ( 3, 100, 0 );
    agk::SetSpritePosition ( 4, 150, 0 );
    agk::SetSpritePosition ( 5, 200, 0 );
<br>
    agk::SetSpritePhysicsOn ( 1, 2 );
    agk::SetSpritePhysicsOn ( 2, 2 );
    agk::SetSpritePhysicsOn ( 3, 2 );
    agk::SetSpritePhysicsOn ( 4, 2 );
    agk::SetSpritePhysicsOn ( 5, 2 );
}

void app::Loop ( void )
{
    agk::Sync ( );
}
_tier2

_sheader
Conclusion
_text
Being able to set the gravity for your sprites allows you to create some interesting effects. Try experimenting with the gravity values and see the results.


