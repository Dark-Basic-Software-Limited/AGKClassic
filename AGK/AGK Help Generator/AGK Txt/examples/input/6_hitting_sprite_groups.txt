_header
Hitting sprite groups

_text
All sprites have a group property that can be used for filtering collisions, which by default is set to be 0. Altering this might be useful in some situations, for example, your game may have blue and red robots running round a level, with the objective being to click or touch the blue robots and avoid the red robots. In this example the blue robots could be assigned a group of 1, with the red robots being assigned to group 2. All that's left is to make a call to the command <i>GetSpriteHitGroup</i> and pass in the ID of the group and the location on screen and then you can easily determine whether the user has hit the blue or red robots.

_text
This example program creates 4 sprites, positions them at random locations on the screen and then assigns them to group 1. Another 4 sprites are created, positioned at random locations and then get assigned to group 2. Within the main loop <i>GetSpriteHitGroup</i> is used to determine when a user touches or clicks a sprite in group 2.

_image
6_hitting_sprite_groups.jpg

_sheader
Getting started

_text
The code performs the following tasks:

_listbegin
set a virtual resolution of 320 x 480
load an image named chip5.png
load an image named chip25.png
run a for loop that creates 4 sprites using chip5.png, positions them on screen, turns physics on and assigns them to group 1
run a for loop that creates 4 sprites using chip25.png, positions them on screen, turns physics on and assigns them to group 2
_listend

_tier1
SetVirtualResolution ( 320, 480 )
<br>
LoadImage ( 1, "chip5.png" )
LoadImage ( 2, "chip25.png" )
<br>
for i = 1 to 4
    sprite = CreateSprite ( 1 )
<br>
    SetSpritePosition  ( sprite, Random ( 10, 280 ), Random ( 50, 400 ) )
    SetSpritePhysicsOn ( sprite, 1 )
    SetSpriteGroup     ( sprite, 1 )
next i
<br>
for i = 1 to 4
    sprite = CreateSprite ( 2 )
<br>
    SetSpritePosition  ( sprite, Random ( 10, 280 ), Random ( 50, 400 ) )
    SetSpritePhysicsOn ( sprite, 1 )
    SetSpriteGroup     ( sprite, 2 )
next i
_tier1

_tier2
void app::Begin ( void )
{
    agk::SetVirtualResolution ( 320, 480 );
<br>
    agk::LoadImage ( 1, "chip5.png" );
    agk::LoadImage ( 2, "chip25.png" );
<br>
    for ( int i = 0; i < 4; i++ )
    {
        int sprite = agk::CreateSprite ( 1 );
<br>
        agk::SetSpritePosition  ( sprite, agk::Random ( 10, 280 ), agk::Random ( 50, 400 ) );
        agk::SetSpritePhysicsOn ( sprite, 1 );
        agk::SetSpriteGroup     ( sprite, 1 );
    }
<br>
    for ( int i = 0; i < 4; i++ )
    {
        int sprite = agk::CreateSprite ( 2 );
<br>
        agk::SetSpritePosition  ( sprite, agk::Random ( 10, 280 ), agk::Random ( 50, 400 ) );
        agk::SetSpritePhysicsOn ( sprite, 1 );
        agk::SetSpriteGroup     ( sprite, 2 );
    }
}
_tier2

_text
<br>Notice how physics is turned on for the sprites prior to setting a group. The reason for this is that in order to use groups a sprite must have physics enabled, so in our example the sprites have physics turned on and are set to be static objects.

_sheader
Hitting a sprite

_text
Within our main loop an if statement is used to determine when the user hits or touches the screen, at this point <i>GetSpriteHitGroup</i> is called. The command takes three parameters - a group ID and an X and Y location, which for our purposes will be the group 2 and the location of the input. The return value is an ID number for whatever sprite was hit, this gets stored in a variable that is printed out on screen:

_tier1
do
    Print ( "Group 2 sprite ID:" )
    Print ( sprite )
<br>
    if ( GetPointerPressed ( ) = 1 )
        sprite = GetSpriteHitGroup ( 2, GetPointerX ( ), GetPointerY ( ) )
    endif
<br>	
    Sync ( )
loop
_tier1

_tier2
void app::Loop ( void )
{
    agk::Print ( "Group 2 sprite ID:" );
    agk::Print ( iSprite );
<br>
    if ( agk::GetPointerPressed ( ) )
        iSprite = agk::GetSpriteHitGroup ( 2, agk::GetPointerX ( ), agk::GetPointerY ( ) );
<br>
    agk::Sync ( );
}
_tier2

_text
Whenever the user touches or clicks the screen only sprites from group 2 register input, the sprites in group 1 are ignored. When the user hits empty space the command <i>GetSpriteHitGroup</i> returns a value of 0.

_sheader
Full code listing
_text
Everything is now in place. Here's the final code for our program:

_tier1
SetVirtualResolution ( 320, 480 )
<br>
backdrop = CreateSprite ( LoadImage ( "background2.jpg" ) )
SetSpriteColorAlpha ( backdrop, 100 )
<br>
LoadImage ( 1, "chip5.png" )
LoadImage ( 2, "chip25.png" )
<br>
for i = 1 to 4
    sprite = CreateSprite ( 1 )
<br>
    SetSpritePosition  ( sprite, Random ( 10, 280 ), Random ( 50, 400 ) )
    SetSpritePhysicsOn ( sprite, 1 )
    SetSpriteGroup     ( sprite, 1 )
next i
<br>
for i = 1 to 4
    sprite = CreateSprite ( 2 )
<br>
    SetSpritePosition  ( sprite, Random ( 10, 280 ), Random ( 50, 400 ) )
    SetSpritePhysicsOn ( sprite, 1 )
    SetSpriteGroup     ( sprite, 2 )
next i
<br>
do
    Print ( "Group 2 sprite ID:" )
    Print ( sprite )
<br>
    if ( GetPointerPressed ( ) = 1 )
        sprite = GetSpriteHitGroup ( 2, GetPointerX ( ), GetPointerY ( ) )
    endif
<br>	
    Sync ( )
loop
_tier1

_tier2
void app::Begin ( void )
{
    agk::SetVirtualResolution ( 320, 480 );
<br>
    int backdrop = agk::CreateSprite ( agk::LoadImage ( "background2.jpg" ) );
    agk::SetSpriteColorAlpha ( backdrop, 100 );
<br>
    agk::LoadImage ( 1, "chip5.png" );
    agk::LoadImage ( 2, "chip25.png" );
<br>
    for ( int i = 0; i < 4; i++ )
    {
        int sprite = agk::CreateSprite ( 1 );
<br>
        agk::SetSpritePosition  ( sprite, agk::Random ( 10, 280 ), agk::Random ( 50, 400 ) );
        agk::SetSpritePhysicsOn ( sprite, 1 );
        agk::SetSpriteGroup     ( sprite, 1 );
    }
<br>
    for ( int i = 0; i < 4; i++ )
    {
        int sprite = agk::CreateSprite ( 2 );
<br>
        agk::SetSpritePosition  ( sprite, agk::Random ( 10, 280 ), agk::Random ( 50, 400 ) );
        agk::SetSpritePhysicsOn ( sprite, 1 );
        agk::SetSpriteGroup     ( sprite, 2 );
    }
}
<br>
void app::Loop ( void )
{
    agk::Print ( "Group 2 sprite ID:" );
    agk::Print ( iSprite );
<br>
    if ( agk::GetPointerPressed ( ) )
        iSprite = agk::GetSpriteHitGroup ( 2, agk::GetPointerX ( ), agk::GetPointerY ( ) );
<br>
    agk::Sync ( );
}
_tier2

_sheader
Conclusion

_text
By assigning sprites to groups it is possible to have extra control when interacting with them. As you can see from this example it's a very useful feature, and being able to quickly determine whether a user has touched a sprite with one command call can save a lot of time and allows you to focus on the more important elements of your game.


