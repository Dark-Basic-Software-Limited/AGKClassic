<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<title>Ray casting - AGK Help</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<script type="text/javascript" src="../../main.js"></script>
<link href="../../main.css" rel="styleSheet" type="text/css" />
<link href="../../prettify.css" rel="styleSheet" type="text/css" />
<script type="text/javascript" src="../../prettify.js"></script>
<script type="text/javascript" src="../../lang-agk.js"></script>
<link rel="stylesheet" href="../lightbox/css/lightbox.min.css">
<script src="../lightbox/js/lightbox-plus-jquery.min.js"></script>
<script src="../clipboard/clipboard.min.js"></script>
<script type="text/javascript" src="https://www.appgamekit.com/assets/js/docs-jquery.min.js"></script>
<script type="text/javascript" src="https://www.appgamekit.com/assets/js/docs-translate.js"></script>
</head>
<body>
<script>var clipboard = new Clipboard('.btn');
clipboard.on('success', function(e)
{
console.log(e);
});
clipboard.on('error', function(e)
{
console.log(e);
});
</script>
<div class="header" style="background: #000 url('../../gfx/header-back.png') top center no-repeat;"><div><div class="navigation"><a href="../../home.html"><img src="../../gfx/b-home.png" width="76" height="44" alt=""></a><a href="javascript:history.go(-1)"><img src="../../gfx/b-back.png" width="71" height="44" alt=""></a><a href="javascript:window.print()"><img src="../../gfx/b-print.png" width="75" height="44" alt=""></a><a style="cursor:pointer;" onclick="ToggleCPP()"><img src="../../gfx/lang-c.png" width="253" height="44" alt=""  id="basicCodeBlock0" border="0"></a><a style="cursor:pointer;" onclick="ToggleCPP()"><img src="../../gfx/lang-basic.png" width="253" height="44" alt=""  id="cppCodeBlock0" style="display:none" border="0"></a></div><a href="https://www.appgamekit.com" target="_blank"><img class="logo" src="../../gfx/agk-logo.png" height="44" style="margin:15px 0" alt="App Game Kit" border="0"></a></div><img src="../../gfx/drop-shadow.png" width="1158" height="40" alt=""></div><div class="breadcrumbs">
<a href="../../home.html">Home</a> &gt; <a href="../../examples.html">Examples</a> &gt; Ray casting</div><div class="page"><h1>Ray casting</h1><h2>Description</h2><p>The ray casting commands provided in AGK offer the ability to check whether a collision has occurred between two points. This can be useful for a wide variety of situations, such as testing whether a race car crosses a checkpoint, finding out how close a player is to an enemy and much more.</p><p>This example places three sprites on screen with two of them being static and the remaining one moving up and down the screen. A ray cast is performed to check when the dynamic sprite moves between the static sprites. When this happens both static sprites have their color changed to red and when no collision occurs their color is reset.</p><div align="center"><img src="12_ray_casting.jpg"/></div><h2>Getting started</h2><p>As mentioned previously three sprites will be used in this example. The dynamic sprite will use an image named "gold.png", while the static sprites will use an image named "silver.png".</p><p><br>The set up code defines a virtual resolution of 320 x 480, loads the images gold.png and silver.png, followed by the creation of sprite 1 (our dynamic sprite) and sprites 2 and 3 that are the static sprites. Note that a call is made to the command <i>SetSpriteShape</i> for sprite 1, to ensure a circle is used for collision checks. This line plays an important part, as without it no collision checks can be performed.</p><div id="basicCodeBlock1" style="border: 1px solid #ccd; background: #f3f3fc; margin: 10px 0;"><pre class="prettyprint lang-agk" style="margin:14px; font-size: 14px; white-space:pre-wrap;">SetVirtualResolution ( 320, 480 )
<br>
CreateSprite ( LoadImage ( "background7.jpg" ) )
<br>
LoadImage ( 1, "gold.png" )
LoadImage ( 2, "silver.png" )
<br>
CreateSprite ( 1, 1 )
SetSpritePosition ( 1, 150, 0 )
SetSpriteShape ( 1, 1 )
<br>
CreateSprite ( 2, 2 )
SetSpritePosition ( 2, 30, 200 )
<br>
CreateSprite ( 3, 2 )
SetSpritePosition ( 3, 260, 200 )
</pre></div><div align="right"><button class="btn" data-clipboard-text="SetVirtualResolution ( 320, 480 )

CreateSprite ( LoadImage ( &quot;background7.jpg&quot; ) )

LoadImage ( 1, &quot;gold.png&quot; )
LoadImage ( 2, &quot;silver.png&quot; )

CreateSprite ( 1, 1 )
SetSpritePosition ( 1, 150, 0 )
SetSpriteShape ( 1, 1 )

CreateSprite ( 2, 2 )
SetSpritePosition ( 2, 30, 200 )

CreateSprite ( 3, 2 )
SetSpritePosition ( 3, 260, 200 )
">Copy Code</button></div><div id="cppCodeBlock2" style="display:none; border: 1px solid #ccd; background: #f3f3fc; margin: 10px 0;"><pre style="margin:14px; font-size: 14px; white-space:pre-wrap;" class="prettyprint lang-cpp">agk::SetVirtualResolution ( 320, 480 );
<br>
agk::CreateSprite ( agk::LoadImage ( "background7.jpg" ) );
<br>
agk::LoadImage ( 1, "gold.png" );
agk::LoadImage ( 2, "silver.png" );
<br>
agk::CreateSprite ( 1, 1 );
agk::SetSpritePosition ( 1, 150, 0 );
agk::SetSpriteShape ( 1, 1 );
<br>
agk::CreateSprite ( 2, 2 );
agk::SetSpritePosition ( 2, 30, 200 );
<br>
agk::CreateSprite ( 3, 2 );
agk::SetSpritePosition ( 3, 260, 200 );
</pre></div><h2>Moving the dynamic sprite</h2><p>Sprite 1 will move up and down the screen continually. These lines of code deal with the movement and are to be used within the main loop:</p><div id="basicCodeBlock3" style="border: 1px solid #ccd; background: #f3f3fc; margin: 10px 0;"><pre class="prettyprint lang-agk" style="margin:14px; font-size: 14px; white-space:pre-wrap;">if ( direction = 0 )
    SetSpriteY ( 1, GetSpriteY ( 1 ) + 1 )
<br>
    if ( GetSpriteY ( 1 ) > 400 )
        direction = 1
    endif
endif
<br>
if ( direction = 1 )
    SetSpriteY ( 1, GetSpriteY ( 1 ) - 1 )
<br>
    if ( GetSpriteY ( 1 ) < 30 )
        direction = 0
    endif
endif
</pre></div><div align="right"><button class="btn" data-clipboard-text="if ( direction = 0 )
    SetSpriteY ( 1, GetSpriteY ( 1 ) + 1 )

    if ( GetSpriteY ( 1 ) > 400 )
        direction = 1
    endif
endif

if ( direction = 1 )
    SetSpriteY ( 1, GetSpriteY ( 1 ) - 1 )

    if ( GetSpriteY ( 1 ) < 30 )
        direction = 0
    endif
endif
">Copy Code</button></div><div id="cppCodeBlock4" style="display:none; border: 1px solid #ccd; background: #f3f3fc; margin: 10px 0;"><pre style="margin:14px; font-size: 14px; white-space:pre-wrap;" class="prettyprint lang-cpp">if ( direction == 0 )
{
    agk::SetSpriteY ( 1, agk::GetSpriteY ( 1 ) + 1 );
<br>
    if ( agk::GetSpriteY ( 1 ) > 400 )
        direction = 1;
}
<br>
if ( direction == 1 )
{
    agk::SetSpriteY ( 1, agk::GetSpriteY ( 1 ) - 1 );
<br>
    if ( agk::GetSpriteY ( 1 ) < 30 )
        direction = 0;
}
</pre></div><p>Initially the variable <i>direction</i> is set to 0. When <i>direction</i> is 0 the sprite is moved down the screen by adding 1 to its Y position, a check is then made to see if the sprites Y value is greater than 400 pixels and when this is true the <i>direction</i> variable gets set to 1. When <i>direction</i> is 1 the sprite is moved up the screen by deducting 1 from its Y position, a check is then made to see if the sprites Y value is less than 30 pixels and when this is true the <i>direction</i> variable gets set to 0 and in doing so kicking off the process of moving down. The end result is that this block of code will continually move sprite 1 up and down the screen.</p><h2>Performing a ray cast</h2><p>There are two stages to performing a ray cast, the first being the actual ray cast and the second retrieving information from any collisions. The first step is either carried out with the command <i>SpriteRayCast</i> or <i>PhysicsRayCast</i>. The first command is used for ray casting on non physics sprites, while the second command is used to deal with sprites that have physics enabled. Physics enabled sprites are not being used in this example therefore <i>SpriteRayCast</i> will be used. This command takes four parameters: x, y, x2, y2. The first two parameters control the starting location of the ray cast and the second two determine the end location. In this example a ray cast will be performed between the location of the first static sprite (ID 2) on the left and the location of the second static sprite (ID 3) on the right:</p><div id="basicCodeBlock5" style="border: 1px solid #ccd; background: #f3f3fc; margin: 10px 0;"><pre class="prettyprint lang-agk" style="margin:14px; font-size: 14px; white-space:pre-wrap;">if ( SpriteRayCast ( 30, 200, 260, 200 ) = 1 )
<br>
endif
</pre></div><div align="right"><button class="btn" data-clipboard-text="if ( SpriteRayCast ( 30, 200, 260, 200 ) = 1 )

endif
">Copy Code</button></div><div id="cppCodeBlock6" style="display:none; border: 1px solid #ccd; background: #f3f3fc; margin: 10px 0;"><pre style="margin:14px; font-size: 14px; white-space:pre-wrap;" class="prettyprint lang-cpp">if ( agk::SpriteRayCast ( 30, 200, 260, 200 ) == 1 )
{
<br>
}
</pre></div><p>The positions for the start and end location of the ray cast are hard coded to match sprites 2 and 3. If this command returns a value of 1 then we know that a collision has occurred between these points and can then act on it. Please note that sprites 2 and 3 are only present to give a visual marker for the ray that is being cast, their presence on screen has no bearing on the collision tests.</p><p>When a collision takes place sprites 2 and 3 will have their color set to red, and when there is no collision their colors will be set to white. The above code is amended to:</p><div id="basicCodeBlock7" style="border: 1px solid #ccd; background: #f3f3fc; margin: 10px 0;"><pre class="prettyprint lang-agk" style="margin:14px; font-size: 14px; white-space:pre-wrap;">if ( SpriteRayCast ( 30, 200, 260, 200 ) = 1 )
    SetSpriteColor ( 2, 255, 0, 0, 255 )
    SetSpriteColor ( 3, 255, 0, 0, 255 )
else
    SetSpriteColor ( 2, 255, 255, 255, 255 )
    SetSpriteColor ( 3, 255, 255, 255, 255 )
endif
</pre></div><div align="right"><button class="btn" data-clipboard-text="if ( SpriteRayCast ( 30, 200, 260, 200 ) = 1 )
    SetSpriteColor ( 2, 255, 0, 0, 255 )
    SetSpriteColor ( 3, 255, 0, 0, 255 )
else
    SetSpriteColor ( 2, 255, 255, 255, 255 )
    SetSpriteColor ( 3, 255, 255, 255, 255 )
endif
">Copy Code</button></div><div id="cppCodeBlock8" style="display:none; border: 1px solid #ccd; background: #f3f3fc; margin: 10px 0;"><pre style="margin:14px; font-size: 14px; white-space:pre-wrap;" class="prettyprint lang-cpp">if ( agk::SpriteRayCast ( 30, 200, 260, 200 ) == 1 )
{
    agk::SetSpriteColor ( 2, 255, 0, 0, 255 );
    agk::SetSpriteColor ( 3, 255, 0, 0, 255 );
}
else
{
    agk::SetSpriteColor ( 2, 255, 255, 255, 255 );
    agk::SetSpriteColor ( 3, 255, 255, 255, 255 );
}
</pre></div><p>When the program runs and sprite 1 intersects this line sprites 2 and 3 will change color to red.</p><p>More information is available to us after a ray cast has occurred, for example, it's possible to determine the ID of the sprite involved in the ray cast by calling <i>GetRayCastSpriteID</i> and you can find out the position of the collision by calling <i>GetRayCastX</i> and <i>GetRayCastY</i>. These commands only return valid information if <i>SpriteRayCast</i> or <i>PhysicsRayCast</i> return 1 indicating a collision took place.</p><h2>Full code listing</h2><p>Everything is now in place. Here's the final code for our program:</p><div id="basicCodeBlock9" style="border: 1px solid #ccd; background: #f3f3fc; margin: 10px 0;"><pre class="prettyprint lang-agk" style="margin:14px; font-size: 14px; white-space:pre-wrap;">SetVirtualResolution ( 320, 480 )
<br>
LoadImage ( 1, "gold.png" )
LoadImage ( 2, "silver.png" )
<br>
CreateSprite ( 1, 1 )
SetSpritePosition ( 1, 150, 0 )
SetSpriteShape ( 1, 1 )
<br>
CreateSprite ( 2, 2 )
SetSpritePosition ( 2, 30, 200 )
<br>
CreateSprite ( 3, 2 )
SetSpritePosition ( 3, 260, 200 )
<br>
direction = 0
<br>
do
    if ( SpriteRayCast ( 30, 200, 260, 200 ) = 1 )
        SetSpriteColor ( 2, 255, 0, 0, 255 )
        SetSpriteColor ( 3, 255, 0, 0, 255 )
    else
        SetSpriteColor ( 2, 255, 255, 255, 255 )
        SetSpriteColor ( 3, 255, 255, 255, 255 )
    endif
<br>
    if ( direction = 0 )
        SetSpriteY ( 1, GetSpriteY ( 1 ) + 1 )
<br>
        if ( GetSpriteY ( 1 ) > 400 )
            direction = 1
        endif
    endif
<br>
    if ( direction = 1 )
        SetSpriteY ( 1, GetSpriteY ( 1 ) - 1 )
<br>
        if ( GetSpriteY ( 1 ) < 30 )
            direction = 0
        endif
    endif
<br>
    sync ( )
loop
</pre></div><div align="right"><button class="btn" data-clipboard-text="SetVirtualResolution ( 320, 480 )

LoadImage ( 1, &quot;gold.png&quot; )
LoadImage ( 2, &quot;silver.png&quot; )

CreateSprite ( 1, 1 )
SetSpritePosition ( 1, 150, 0 )
SetSpriteShape ( 1, 1 )

CreateSprite ( 2, 2 )
SetSpritePosition ( 2, 30, 200 )

CreateSprite ( 3, 2 )
SetSpritePosition ( 3, 260, 200 )

direction = 0

do
    if ( SpriteRayCast ( 30, 200, 260, 200 ) = 1 )
        SetSpriteColor ( 2, 255, 0, 0, 255 )
        SetSpriteColor ( 3, 255, 0, 0, 255 )
    else
        SetSpriteColor ( 2, 255, 255, 255, 255 )
        SetSpriteColor ( 3, 255, 255, 255, 255 )
    endif

    if ( direction = 0 )
        SetSpriteY ( 1, GetSpriteY ( 1 ) + 1 )

        if ( GetSpriteY ( 1 ) > 400 )
            direction = 1
        endif
    endif

    if ( direction = 1 )
        SetSpriteY ( 1, GetSpriteY ( 1 ) - 1 )

        if ( GetSpriteY ( 1 ) < 30 )
            direction = 0
        endif
    endif

    sync ( )
loop
">Copy Code</button></div><div id="cppCodeBlock10" style="display:none; border: 1px solid #ccd; background: #f3f3fc; margin: 10px 0;"><pre style="margin:14px; font-size: 14px; white-space:pre-wrap;" class="prettyprint lang-cpp">void app::Begin ( void )
{
    agk::SetVirtualResolution ( 320, 480 );
<br>
    agk::LoadImage ( 1, "gold.png" );
    agk::LoadImage ( 2, "silver.png" );
<br>
    agk::CreateSprite ( 1, 1 );
    agk::SetSpritePosition ( 1, 150, 0 );
    agk::SetSpriteShape ( 1, 1 );
<br>
    agk::CreateSprite ( 2, 2 );
    agk::SetSpritePosition ( 2, 30, 200 );
<br>
    agk::CreateSprite ( 3, 2 );
    agk::SetSpritePosition ( 3, 260, 200 );
}
<br>
void app::Loop ( void )
{
    if ( agk::SpriteRayCast ( 30, 200, 260, 200 ) == 1 )
    {
        agk::SetSpriteColor ( 2, 255, 0, 0, 255 );
        agk::SetSpriteColor ( 3, 255, 0, 0, 255 );
    }
    else
    {
        agk::SetSpriteColor ( 2, 255, 255, 255, 255 );
        agk::SetSpriteColor ( 3, 255, 255, 255, 255 );
    }
<br>
    if ( direction == 0 )
    {
        agk::SetSpriteY ( 1, agk::GetSpriteY ( 1 ) + 1 );
<br>
        if ( agk::GetSpriteY ( 1 ) > 400 )
            direction = 1;
    }
<br>
    if ( direction == 1 )
    {
        agk::SetSpriteY ( 1, agk::GetSpriteY ( 1 ) - 1 );
<br>
        if ( agk::GetSpriteY ( 1 ) < 30 )
            direction = 0;
    }
<br>
    agk::Sync ( );
}
</pre></div><h2>Conclusion</h2><p>There are a few key points to remember when needing to perform a ray cast in your games:</p><ul><li>ensure your sprite has a shape by using <i>SetSpriteShape</i></li><li>use <i>SpriteRayCast</i> for sprites that do not use physics</li><li>use <i>PhysicsRayCast</i> for sprites that do use physics</li></ul><p>It's also worth noting that alternative commands are available for ray casting, such as the ability to perform a ray cast against a group of sprites. It is also possible to perform a ray cast on a single sprite. The commands to deal with this functionality are:</p><ul><li>PhysicsRayCastGroup</li><li>SpriteRayCastGroup</li><li>SpriteRayCastSingle</li></ul><p>The commands <i>PhysicsRayCastGroup</i> and <i>SpriteRayCastGroup</i> are used in conjunction with the <i>SetSpriteGroup</i> command. This is useful for a situation where you only want to perform collision checks against a certain set of sprites. </p><p>When you want to perform a ray cast with a specific sprite use the command <i>SpriteRayCastSingle</i>.</p><br><br></div><div class="footer" style="background: #000 url('../../gfx/footer-back.png') top center no-repeat;"><div><p><a href="https://www.thegamecreators.com" target="_blank" style="float:none"><img style="float:right;margin-top:2px" src="../../gfx/tgc-logo.png" width="188" height="27" alt="" border="0"></a><br><strong>App Game Kit</strong> &nbsp;&copy; The Game Creators Ltd. All Rights Reserved.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="mailto:agkreports@thegamecreators.com" style="float:none"><font color="FFFFFF">Report an issue</font></a></p></p></div></div><script type="text/javascript">prettyPrint(true);</script></body></html>