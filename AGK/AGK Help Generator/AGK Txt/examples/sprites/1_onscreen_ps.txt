_header
Sprites using the percentage system

_sheader
Description
_text
In this example we're going to place a sprite on screen using the approach of the percentage based system.

_image
1_onscreen_ps.jpg

_sheader
Overview
_text
The process involved is as follows:

_listbegin
load an image
create a sprite
setting the size of a sprite
main loop
_listend

_sheader
Load an image
_text
In this next step we're going to load an image. This is achieved by calling the command <i>LoadImage</i>. This command either accepts or returns an ID number, followed by a filename. Let's see this in practice:

_tier1
image = LoadImage ( "blue.png" )
_tier1

_tier2
image = agk::LoadImage ( "blue.png" );
_tier2

_text
This line calls <i>LoadImage</i> passing in the filename "blue.png", it then returns an ID number which gets saved in the variable image. This ID number is now treated as a handle to our image and can be used later on when referring to it.

_text
An alternative option is to specify the ID number manually e.g.

_tier1
LoadImage ( 1, "blue.png" )
_tier1

_tier2
agk::LoadImage ( 1, "blue.png" );
_tier2

_sheader
Creating a sprite
_text
Now that we have an image loaded into memory we're ready to create a sprite and attach this image to it. This is achieved by calling the command <i>CreateSprite</i>. This command either accepts or returns an ID number followed by an ID number of the image you wish to attach to the sprite:

_tier1
sprite = CreateSprite ( image )
_tier1

_tier2
sprite = agk::CreateSprite ( image );
_tier2

_text
Here we call <i>CreateSprite</i> passing in an ID number for our image and returning an ID number for the sprite. We're effectively saying create a sprite, attach this image to it and give us back an ID number for this sprite. This ID number for the sprite can be stored for use later on when dealing with sprite properties, for example.

_sheader
Setting the size of a sprite
_text
When using the percentage based system it's necessary to specify the size of your sprite. The reason for this is that when you load an image and attach it to the sprite, the system does not know how big your sprite is going to be in relation to the screen. Therefore when using the percentage based system you always need to specify the size of your sprite. This is handled by the command <i>SetSpriteSize</i>. This command's parameters are an ID number, width of the sprite and height of the sprite. If you wanted to set our previously created sprite to take up 50% of the screens width and 50% of the screens height we would call this:

_tier1
SetSpriteSize ( sprite, 50, 50 )
_tier1

_tier2
agk::SetSpriteSize ( sprite, 50, 50 );
_tier2

_text
Given that our image is not square (it has dimensions of 54 x 50) the result may not be totally as expected. Our sprite will look slightly squashed. The solution for this is quite simple - let AGK determine the correct proportions for us. This is achieved by specifying either the width or the height and then -1 for the unspecified parameter e.g.

_tier1
SetSpriteSize ( sprite, 50, -1 )
_tier1

_tier2
agk::SetSpriteSize ( sprite, 50, -1 );
_tier2

_text
So here we're saying we want our sprite to take up 50% of the screen on the X axis and then letting AGK decide the size on the Y axis in order to ensure it’s displayed correctly.

_sheader
Main Loop
_text
Up to this point we have loaded an image and created a sprite that uses this image and set its size. We’re nearly ready to run our application and see the results. Prior to this we need to ensure one more thing - in our main loop we must call <i>Sync</i> to ensure the screen gets updated and its contents drawn. The function Sync takes no parameters and can be called in your main loop like this:

_tier1
do
    sync ( )
loop
_tier1

_tier2
void app::Loop ( void )
{
    agk::Sync ( );
}
_tier2

_sheader
Full code listing
_text
Everything is now in place. Here's the final code for our program:

_tier1
image = LoadImage ( "blue.png" )
<br>
sprite = CreateSprite ( image )
<br>
SetSpriteSize ( sprite, 50, -1 )
<br>
do
    Sync ( )
loop
_tier1

_tier2
void app::Begin ( void )
{
    agk::image = LoadImage ( "blue.png" );
<br>
    agk::sprite = CreateSprite ( image );
<br>
    agk::SetSpriteSize ( sprite, 50, -1 );
}
<br>
void app::Loop ( void )
{
    agk::Sync ( );
}
_tier2

_sheader
Conclusion
_text
We're now all set to run our application and see the results on screen.

_text
Understanding how sprite sizes work is important for the percentage based system. It's advisable to take time loading in different images and experimenting with the width and height parameters. Doing this will help you to understand the relationship between the original image width and height and the results on screen.

















