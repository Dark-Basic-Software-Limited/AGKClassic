<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<title>Benchmarking - AGK Help</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<script type="text/javascript" src="../../main.js"></script>
<link href="../../main.css" rel="styleSheet" type="text/css" />
<link href="../../prettify.css" rel="styleSheet" type="text/css" />
<script type="text/javascript" src="../../prettify.js"></script>
<script type="text/javascript" src="../../lang-agk.js"></script>
<link rel="stylesheet" href="../lightbox/css/lightbox.min.css">
<script src="../lightbox/js/lightbox-plus-jquery.min.js"></script>
<script src="../clipboard/clipboard.min.js"></script>
<script type="text/javascript" src="https://www.appgamekit.com/assets/js/docs-jquery.min.js"></script>
<script type="text/javascript" src="https://www.appgamekit.com/assets/js/docs-translate.js"></script>
</head>
<body>
<script>var clipboard = new Clipboard('.btn');
clipboard.on('success', function(e)
{
console.log(e);
});
clipboard.on('error', function(e)
{
console.log(e);
});
</script>
<div class="header" style="background: #000 url('../../gfx/header-back.png') top center no-repeat;"><div><div class="navigation"><a href="../../home.html"><img src="../../gfx/b-home.png" width="76" height="44" alt=""></a><a href="javascript:history.go(-1)"><img src="../../gfx/b-back.png" width="71" height="44" alt=""></a><a href="javascript:window.print()"><img src="../../gfx/b-print.png" width="75" height="44" alt=""></a><a style="cursor:pointer;" onclick="ToggleCPP()"><img src="../../gfx/lang-c.png" width="253" height="44" alt=""  id="basicCodeBlock0" border="0"></a><a style="cursor:pointer;" onclick="ToggleCPP()"><img src="../../gfx/lang-basic.png" width="253" height="44" alt=""  id="cppCodeBlock0" style="display:none" border="0"></a></div><a href="https://www.appgamekit.com" target="_blank"><img class="logo" src="../../gfx/agk-logo.png" height="44" style="margin:15px 0" alt="App Game Kit" border="0"></a></div><img src="../../gfx/drop-shadow.png" width="1158" height="40" alt=""></div><div class="breadcrumbs">
<a href="../../home.html">Home</a> &gt; <a href="../../examples.html">Examples</a> &gt; Benchmarking</div><div class="page"><h1>Benchmarking</h1><h2>Description</h2><p>The benchmarking commands within AGK can be used to determine information about what's happening at runtime, such as the number of sprites being drawn or the amount of time that the physics simulation is using. This information is particularly useful if you are attempting to improve the performance of a game that may be running slowly on certain platforms, for example, these commands could be used to discover that the physics simulation is taking up a great deal of time, therefore you can act on this by doing something like reducing the number of active physics entities.</p><h2>The benchmarking commands</h2><p>Here's a quick overview of the benchmarking commands. All of these commands return values and have no parameters:</p><ul><li><i>GetDrawingSetupTime</i> - Find out how long was taken getting the scene ready for drawing, includes calculating what is visible and transforming sprites.</li><li><i>GetDrawingTime</i> - Returns the time spent drawing the scene.</li><li><i>GetManagedSpriteCount</i> - Returns the number of sprites that are being managed by AGK.</li><li><i>GetManagedSpriteDrawnCount</i> - Tells you how many sprites are being drawn. The higher this is the more of an impact it will have on performance.</li><li><i>GetManagedSpriteSortedCount</i> - Determines how many sprites are being sorted. Sprites are sorted when their depth or texture changes.</li><li><i>GetParticleDrawnPointCount</i> - Returns the number of individual particles that were drawn using point sprites.</li><li><i>GetParticleDrawnQuadCount</i> - Returns the number of individual particles that were drawn using quads.</li><li><i>GetPhysicsTime</i> - Returns the time spent updating the physics simulation.</li><li><i>GetUpdateTime</i> - The time spent updating everything except physics e.g. sprite animation.</li></ul><h2>Getting started</h2><p>This example examines the usage of several commands within the benchmarking section. It will create 500 sprites and scroll them across the screen and have a particle explosion being fired off on a continual basis. Within the main loop statistics about the drawing time etc. will get displayed on screen.</p><div align="center"><img src="0_benchmarking.jpg"/></div><p>The code prior to the main loop takes the following steps:</p><ul><li>Sets a virtual resolution of 320 x 480.</li><li>Creates a background sprite.</li><li>Loads an image for the particles.</li><li>Loads an image for the sprites.</li><li>Creates a particle entity and places it off screen.</li><li>Has a for loop that will create 500 sprites, set their position off screen, apply a random color and set two values in an array that are later used for movement.</li></ul><p>Here's the code:</p><div id="basicCodeBlock1" style="border: 1px solid #ccd; background: #f3f3fc; margin: 10px 0;"><pre class="prettyprint lang-agk" style="margin:14px; font-size: 14px; white-space:pre-wrap;">SetVirtualResolution ( 320, 480 )
<br>
CreateSprite ( LoadImage ( "background1.jpg" ) )
<br>
LoadImage ( 1, "shrapnel3.png" )
LoadImage ( 2, "ball1.png" )
<br>
CreateParticles ( 1, -100, -100 )
<br>
for i = 1 to 500
    CreateSprite ( i, 2 )
    SetSpritePosition ( i, Random ( 320, 2000 ), Random ( 60, 480 ) )
    SetSpriteColor ( i, Random ( 0, 255 ), Random ( 0, 255 ), Random ( 0, 255 ), Random ( 50, 255 ) )
    speed# [ i ] = Random ( 10, 40 ) / 10.0
    move# [ i ] = 0.0
next i
<br>
fire = 1
</pre></div><div align="right"><button class="btn" data-clipboard-text="SetVirtualResolution ( 320, 480 )

CreateSprite ( LoadImage ( &quot;background1.jpg&quot; ) )

LoadImage ( 1, &quot;shrapnel3.png&quot; )
LoadImage ( 2, &quot;ball1.png&quot; )

CreateParticles ( 1, -100, -100 )

for i = 1 to 500
    CreateSprite ( i, 2 )
    SetSpritePosition ( i, Random ( 320, 2000 ), Random ( 60, 480 ) )
    SetSpriteColor ( i, Random ( 0, 255 ), Random ( 0, 255 ), Random ( 0, 255 ), Random ( 50, 255 ) )
    speed# [ i ] = Random ( 10, 40 ) / 10.0
    move# [ i ] = 0.0
next i

fire = 1
">Copy Code</button></div><div id="cppCodeBlock2" style="display:none; border: 1px solid #ccd; background: #f3f3fc; margin: 10px 0;"><pre style="margin:14px; font-size: 14px; white-space:pre-wrap;" class="prettyprint lang-cpp">void app::Begin ( void )
{
    agk::SetVirtualResolution ( 320, 480 );
<br>
    agk::CreateSprite ( agk::LoadImage ( "background1.jpg" ) );
<br>
    agk::LoadImage ( 1, "shrapnel3.png" );
    agk::LoadImage ( 2, "ball1.png" );
<br>
    agk::CreateParticles ( 1, -100, -100 );
<br>
    for ( i = 0; i < 500; i++ )
    {
        agk::CreateSprite ( i, 2 );
        agk::SetSpritePosition ( i, agk::Random ( 320, 2000 ), agk::Random ( 60, 480 ) );
        agk::SetSpriteColor ( i, agk::Random ( 0, 255 ), agk::Random ( 0, 255 ), agk::Random ( 0, 255 ), agk::Random ( 50, 255 ) );
        speed [ i ] = agk::Random ( 10, 40 ) / 10.0;
        move [ i ] = 0.0;
    }
<br>
    fire = 1;
}
</pre></div><h2>Main loop</h2><p>The first block of code within the main loop displays the drawing set up time, the amount of time it took to draw the scene, the number of sprites being drawn, the number of particles being displayed and the current frame rate:</p><div id="basicCodeBlock3" style="border: 1px solid #ccd; background: #f3f3fc; margin: 10px 0;"><pre class="prettyprint lang-agk" style="margin:14px; font-size: 14px; white-space:pre-wrap;">Print ( "Drawing set up time = " + str ( GetDrawingSetupTime ( ) ) )
Print ( "Drawing time        = " + str ( GetDrawingTime ( ) ) )
Print ( "Sprites drawn       = " + str ( GetManagedSpriteDrawnCount ( ) ) )
Print ( "Particles drawn     = " + str ( GetParticleDrawnQuadCount ( ) ) )
Print ( "Frame rate          = " + str ( screenFPS ( ) ) )
</pre></div><div align="right"><button class="btn" data-clipboard-text="Print ( &quot;Drawing set up time = &quot; + str ( GetDrawingSetupTime ( ) ) )
Print ( &quot;Drawing time        = &quot; + str ( GetDrawingTime ( ) ) )
Print ( &quot;Sprites drawn       = &quot; + str ( GetManagedSpriteDrawnCount ( ) ) )
Print ( &quot;Particles drawn     = &quot; + str ( GetParticleDrawnQuadCount ( ) ) )
Print ( &quot;Frame rate          = &quot; + str ( screenFPS ( ) ) )
">Copy Code</button></div><div id="cppCodeBlock4" style="display:none; border: 1px solid #ccd; background: #f3f3fc; margin: 10px 0;"><pre style="margin:14px; font-size: 14px; white-space:pre-wrap;" class="prettyprint lang-cpp">agk::Print ( "Drawing set up time = " + agk::str ( agk::GetDrawingSetupTime ( ) ) );
agk::Print ( "Drawing time        = " + agk::str ( agk::GetDrawingTime ( ) ) );
agk::Print ( "Sprites drawn       = " + agk::str ( agk::GetManagedSpriteDrawnCount ( ) ) );
agk::Print ( "Particles drawn     = " + agk::str ( agk::GetParticleDrawnQuadCount ( ) ) );
agk::Print ( "Frame rate          = " + agk::str ( agk::screenFPS ( ) ) );
</pre></div><p>The next section deals with the 500 sprites. They are all moved from left to right and a wavy effect is applied to their Y position, rotation is also applied. The final part checks whether the sprite has gone off screen and then repositions it over to the right.</p><div id="basicCodeBlock5" style="border: 1px solid #ccd; background: #f3f3fc; margin: 10px 0;"><pre class="prettyprint lang-agk" style="margin:14px; font-size: 14px; white-space:pre-wrap;">for i = 1 to 500
    x# = GetSpriteX ( i )
    y# = GetSpriteY ( i )
<br>
    y# = y# + cos ( move# [ i ] )
    move# [ i ] = move# [ i ] + speed# [ i ]
<br>
    SetSpritePosition ( i, x# - speed# [ i ], y# )
    SetSpriteAngle ( i, GetSpriteAngle ( i ) + speed# [ i ] )
<br>
    if x# < -100
        SetSpritePosition ( i, Random ( 320, 2000 ), Random ( 60, 480 ) )
    endif
next i
</pre></div><div align="right"><button class="btn" data-clipboard-text="for i = 1 to 500
    x# = GetSpriteX ( i )
    y# = GetSpriteY ( i )

    y# = y# + cos ( move# [ i ] )
    move# [ i ] = move# [ i ] + speed# [ i ]

    SetSpritePosition ( i, x# - speed# [ i ], y# )
    SetSpriteAngle ( i, GetSpriteAngle ( i ) + speed# [ i ] )

    if x# < -100
        SetSpritePosition ( i, Random ( 320, 2000 ), Random ( 60, 480 ) )
    endif
next i
">Copy Code</button></div><div id="cppCodeBlock6" style="display:none; border: 1px solid #ccd; background: #f3f3fc; margin: 10px 0;"><pre style="margin:14px; font-size: 14px; white-space:pre-wrap;" class="prettyprint lang-cpp">for ( i = 0; i < 500; i++ )
{
    x = agk::GetSpriteX ( i );
    y = agk::GetSpriteY ( i );
<br>
    y = y + agk::cos ( move [ i ] );
    move [ i ] = move [ i ] + speed [ i ];
<br>
    agk::SetSpritePosition ( i, x - speed [ i ], y );
    agk::SetSpriteAngle ( i, agk::GetSpriteAngle ( i ) + speed [ i ] );
<br>
    if ( x < -100 )
    {
        agk::SetSpritePosition ( i, agk::Random ( 320, 2000 ), agk::Random ( 60, 480 ) );
    }
}
</pre></div><p>The final block of code within the main loop is responsible for the particles. It begins by creating an explosion and when this explosions ends the particles are reset and restarted.</p><div id="basicCodeBlock7" style="border: 1px solid #ccd; background: #f3f3fc; margin: 10px 0;"><pre class="prettyprint lang-agk" style="margin:14px; font-size: 14px; white-space:pre-wrap;">if ( fire = 1 )
    SetParticlesPosition ( 1, Random ( 100, 200 ), Random ( 100, 300 ) )
<br>
    ResetParticleCount ( 1 )
    SetParticlesFrequency ( 1, 250 )
    SetParticlesLife ( 1, 3.0 )
    SetParticlesSize ( 1, 64 )
    SetParticlesStartZone ( 1, -10, 0, 10, 0 )
    SetParticlesImage ( 1, 1 )
    SetParticlesDirection ( 1, 30, 30 )
    SetParticlesAngle ( 1, 360 )
    SetParticlesVelocityRange ( 1, 0.8, 2.5 )
    SetParticlesMax ( 1, 500 )
<br>
    AddParticlesColorKeyFrame ( 1, 0.0, 0, 0, 0, 0 )
    AddParticlesColorKeyFrame ( 1, 0.5, 255, 255, 0, 255 )
    AddParticlesColorKeyFrame ( 1, 2.8, 255, 0, 0, 0 )
<br>
    AddParticlesForce ( 1, 2.0, 2.8, 25, -25 )
<br>
    fire = 0
endif
<br>
if ( GetParticlesMaxReached ( 1 ) = 1 )
    fire = 1
endif
</pre></div><div align="right"><button class="btn" data-clipboard-text="if ( fire = 1 )
    SetParticlesPosition ( 1, Random ( 100, 200 ), Random ( 100, 300 ) )

    ResetParticleCount ( 1 )
    SetParticlesFrequency ( 1, 250 )
    SetParticlesLife ( 1, 3.0 )
    SetParticlesSize ( 1, 64 )
    SetParticlesStartZone ( 1, -10, 0, 10, 0 )
    SetParticlesImage ( 1, 1 )
    SetParticlesDirection ( 1, 30, 30 )
    SetParticlesAngle ( 1, 360 )
    SetParticlesVelocityRange ( 1, 0.8, 2.5 )
    SetParticlesMax ( 1, 500 )

    AddParticlesColorKeyFrame ( 1, 0.0, 0, 0, 0, 0 )
    AddParticlesColorKeyFrame ( 1, 0.5, 255, 255, 0, 255 )
    AddParticlesColorKeyFrame ( 1, 2.8, 255, 0, 0, 0 )

    AddParticlesForce ( 1, 2.0, 2.8, 25, -25 )

    fire = 0
endif

if ( GetParticlesMaxReached ( 1 ) = 1 )
    fire = 1
endif
">Copy Code</button></div><div id="cppCodeBlock8" style="display:none; border: 1px solid #ccd; background: #f3f3fc; margin: 10px 0;"><pre style="margin:14px; font-size: 14px; white-space:pre-wrap;" class="prettyprint lang-cpp">if ( fire == 1 )
{
    agk::SetParticlesPosition ( 1, agk::Random ( 100, 200 ), agk::Random ( 100, 300 ) );
<br>
    agk::ResetParticleCount ( 1 );
    agk::SetParticlesFrequency ( 1, 250 );
    agk::SetParticlesLife ( 1, 3.0 );
    agk::SetParticlesSize ( 1, 64 );
    agk::SetParticlesStartZone ( 1, -10, 0, 10, 0 );
    agk::SetParticlesImage ( 1, 1 );
    agk::SetParticlesDirection ( 1, 30, 30 );
    agk::SetParticlesAngle ( 1, 360 );
    agk::SetParticlesVelocityRange ( 1, 0.8, 2.5 );
    agk::SetParticlesMax ( 1, 500 );
<br>
    agk::AddParticlesColorKeyFrame ( 1, 0.0, 0, 0, 0, 0 );
    agk::AddParticlesColorKeyFrame ( 1, 0.5, 255, 255, 0, 255 );
    agk::AddParticlesColorKeyFrame ( 1, 2.8, 255, 0, 0, 0 );
<br>
    agk::AddParticlesForce ( 1, 2.0, 2.8, 25, -25 );
<br>
    fire = 0;
}
<br>
if ( agk::GetParticlesMaxReached ( 1 ) == 1 )
{
    fire = 1;
}
</pre></div><h2>Full code listing</h2><p>Everything is now ready to be presented as the final program:</p><div id="basicCodeBlock9" style="border: 1px solid #ccd; background: #f3f3fc; margin: 10px 0;"><pre class="prettyprint lang-agk" style="margin:14px; font-size: 14px; white-space:pre-wrap;">dim speed# [ 500 ]
dim move#  [ 500 ]
<br>
SetVirtualResolution ( 320, 480 )
<br>
CreateSprite ( LoadImage ( "background1.jpg" ) )
<br>
LoadImage ( 1, "shrapnel3.png" )
LoadImage ( 2, "ball1.png" )
<br>
CreateParticles ( 1, -100, -100 )
<br>
for i = 1 to 500
    CreateSprite ( i, 2 )
    SetSpritePosition ( i, Random ( 320, 2000 ), Random ( 60, 480 ) )
    SetSpriteColor ( i, Random ( 0, 255 ), Random ( 0, 255 ), Random ( 0, 255 ), Random ( 50, 255 ) )
    speed# [ i ] = Random ( 10, 40 ) / 10.0
    move# [ i ] = 0.0
next i
<br>
fire = 1
<br>
do
    Print ( "Drawing set up time = " + str ( GetDrawingSetupTime ( ) ) )
    Print ( "Drawing time        = " + str ( GetDrawingTime ( ) ) )
    Print ( "Sprites drawn       = " + str ( GetManagedSpriteDrawnCount ( ) ) )
    Print ( "Particles drawn     = " + str ( GetParticleDrawnQuadCount ( ) ) )
    Print ( "Frame rate          = " + str ( screenFPS ( ) ) )
<br>
    for i = 1 to 500
        x# = GetSpriteX ( i )
        y# = GetSpriteY ( i )
<br>
        y# = y# + cos ( move# [ i ] )
        move# [ i ] = move# [ i ] + speed# [ i ]
<br>
        SetSpritePosition ( i, x# - speed# [ i ], y# )
        SetSpriteAngle ( i, GetSpriteAngle ( i ) + speed# [ i ] )
<br>
        if x# < -100
            SetSpritePosition ( i, Random ( 320, 2000 ), Random ( 60, 480 ) )
        endif
    next i
<br>
    if ( fire = 1 )
        SetParticlesPosition ( 1, Random ( 100, 200 ), Random ( 100, 300 ) )
<br>
        ResetParticleCount ( 1 )
        SetParticlesFrequency ( 1, 250 )
        SetParticlesLife ( 1, 3.0 )
        SetParticlesSize ( 1, 64 )
        SetParticlesStartZone ( 1, -10, 0, 10, 0 )
        SetParticlesImage ( 1, 1 )
        SetParticlesDirection ( 1, 30, 30 )
        SetParticlesAngle ( 1, 360 )
        SetParticlesVelocityRange ( 1, 0.8, 2.5 )
        SetParticlesMax ( 1, 500 )
<br>
        AddParticlesColorKeyFrame ( 1, 0.0, 0, 0, 0, 0 )
        AddParticlesColorKeyFrame ( 1, 0.5, 255, 255, 0, 255 )
        AddParticlesColorKeyFrame ( 1, 2.8, 255, 0, 0, 0 )
<br>
        AddParticlesForce ( 1, 2.0, 2.8, 25, -25 )
<br>
        fire = 0
    endif
<br>
    if ( GetParticlesMaxReached ( 1 ) = 1 )
        fire = 1
    endif
<Br>
    Sync ( )
loop
</pre></div><div align="right"><button class="btn" data-clipboard-text="dim speed# [ 500 ]
dim move#  [ 500 ]

SetVirtualResolution ( 320, 480 )

CreateSprite ( LoadImage ( &quot;background1.jpg&quot; ) )

LoadImage ( 1, &quot;shrapnel3.png&quot; )
LoadImage ( 2, &quot;ball1.png&quot; )

CreateParticles ( 1, -100, -100 )

for i = 1 to 500
    CreateSprite ( i, 2 )
    SetSpritePosition ( i, Random ( 320, 2000 ), Random ( 60, 480 ) )
    SetSpriteColor ( i, Random ( 0, 255 ), Random ( 0, 255 ), Random ( 0, 255 ), Random ( 50, 255 ) )
    speed# [ i ] = Random ( 10, 40 ) / 10.0
    move# [ i ] = 0.0
next i

fire = 1

do
    Print ( &quot;Drawing set up time = &quot; + str ( GetDrawingSetupTime ( ) ) )
    Print ( &quot;Drawing time        = &quot; + str ( GetDrawingTime ( ) ) )
    Print ( &quot;Sprites drawn       = &quot; + str ( GetManagedSpriteDrawnCount ( ) ) )
    Print ( &quot;Particles drawn     = &quot; + str ( GetParticleDrawnQuadCount ( ) ) )
    Print ( &quot;Frame rate          = &quot; + str ( screenFPS ( ) ) )

    for i = 1 to 500
        x# = GetSpriteX ( i )
        y# = GetSpriteY ( i )

        y# = y# + cos ( move# [ i ] )
        move# [ i ] = move# [ i ] + speed# [ i ]

        SetSpritePosition ( i, x# - speed# [ i ], y# )
        SetSpriteAngle ( i, GetSpriteAngle ( i ) + speed# [ i ] )

        if x# < -100
            SetSpritePosition ( i, Random ( 320, 2000 ), Random ( 60, 480 ) )
        endif
    next i

    if ( fire = 1 )
        SetParticlesPosition ( 1, Random ( 100, 200 ), Random ( 100, 300 ) )

        ResetParticleCount ( 1 )
        SetParticlesFrequency ( 1, 250 )
        SetParticlesLife ( 1, 3.0 )
        SetParticlesSize ( 1, 64 )
        SetParticlesStartZone ( 1, -10, 0, 10, 0 )
        SetParticlesImage ( 1, 1 )
        SetParticlesDirection ( 1, 30, 30 )
        SetParticlesAngle ( 1, 360 )
        SetParticlesVelocityRange ( 1, 0.8, 2.5 )
        SetParticlesMax ( 1, 500 )

        AddParticlesColorKeyFrame ( 1, 0.0, 0, 0, 0, 0 )
        AddParticlesColorKeyFrame ( 1, 0.5, 255, 255, 0, 255 )
        AddParticlesColorKeyFrame ( 1, 2.8, 255, 0, 0, 0 )

        AddParticlesForce ( 1, 2.0, 2.8, 25, -25 )

        fire = 0
    endif

    if ( GetParticlesMaxReached ( 1 ) = 1 )
        fire = 1
    endif
<Br>
    Sync ( )
loop
">Copy Code</button></div><div id="cppCodeBlock10" style="display:none; border: 1px solid #ccd; background: #f3f3fc; margin: 10px 0;"><pre style="margin:14px; font-size: 14px; white-space:pre-wrap;" class="prettyprint lang-cpp">void app::Begin ( void )
{
    agk::SetVirtualResolution ( 320, 480 );
<br>
    agk::CreateSprite ( agk::LoadImage ( "background1.jpg" ) );
<br>
    agk::LoadImage ( 1, "shrapnel3.png" );
    agk::LoadImage ( 2, "ball1.png" );
<br>
    agk::CreateParticles ( 1, -100, -100 );
<br>
    for ( i = 0; i < 500; i++ )
    {
        agk::CreateSprite ( i, 2 );
        agk::SetSpritePosition ( i, agk::Random ( 320, 2000 ), agk::Random ( 60, 480 ) );
        agk::SetSpriteColor ( i, agk::Random ( 0, 255 ), agk::Random ( 0, 255 ), agk::Random ( 0, 255 ), agk::Random ( 50, 255 ) );
        speed [ i ] = agk::Random ( 10, 40 ) / 10.0;
        move [ i ] = 0.0;
    }
<br>
    fire = 1;
}
<br>
void app::Loop ( void )
{
    agk::Print ( "Drawing set up time = " + agk::str ( agk::GetDrawingSetupTime ( ) ) );
    agk::Print ( "Drawing time        = " + agk::str ( agk::GetDrawingTime ( ) ) );
    agk::Print ( "Sprites drawn       = " + agk::str ( agk::GetManagedSpriteDrawnCount ( ) ) );
    agk::Print ( "Particles drawn     = " + agk::str ( agk::GetParticleDrawnQuadCount ( ) ) );
    agk::Print ( "Frame rate          = " + agk::str ( agk::screenFPS ( ) ) );
<br>
    for ( i = 0; i < 500; i++ )
    {    
        x = agk::GetSpriteX ( i );
        y = agk::GetSpriteY ( i );
<br>
        y = y + agk::cos ( move [ i ] );
        move [ i ] = move [ i ] + speed [ i ];
<br>
        agk::SetSpritePosition ( i, x - speed [ i ], y );
        agk::SetSpriteAngle ( i, agk::GetSpriteAngle ( i ) + speed [ i ] );
<br>
        if ( x < -100 )
        {
            agk::SetSpritePosition ( i, agk::Random ( 320, 2000 ), agk::Random ( 60, 480 ) );
        }
    }
<br>
    if ( fire == 1 )
    {
        agk::SetParticlesPosition ( 1, agk::Random ( 100, 200 ), agk::Random ( 100, 300 ) );
<br>
        agk::ResetParticleCount ( 1 );
        agk::SetParticlesFrequency ( 1, 250 );
        agk::SetParticlesLife ( 1, 3.0 );
        agk::SetParticlesSize ( 1, 64 );
        agk::SetParticlesStartZone ( 1, -10, 0, 10, 0 );
        agk::SetParticlesImage ( 1, 1 );
        agk::SetParticlesDirection ( 1, 30, 30 );
        agk::SetParticlesAngle ( 1, 360 );
        agk::SetParticlesVelocityRange ( 1, 0.8, 2.5 );
        agk::SetParticlesMax ( 1, 500 );
<br>
        agk::AddParticlesColorKeyFrame ( 1, 0.0, 0, 0, 0, 0 );
        agk::AddParticlesColorKeyFrame ( 1, 0.5, 255, 255, 0, 255 );
        agk::AddParticlesColorKeyFrame ( 1, 2.8, 255, 0, 0, 0 );
<br>
        agk::AddParticlesForce ( 1, 2.0, 2.8, 25, -25 );
<br>
        fire = 0;
    }
<br>
    if ( agk::GetParticlesMaxReached ( 1 ) == 1 )
    {
        fire = 1;
    }
<br>
    agk::Sync ( );
}
</pre></div><h2>Conclusion</h2><p>While only a small section within AGK, the benchmarking commands are incredibly helpful in attempting to understand performance issues within games and can play an important part in developing a game.</p><br><br></div><div class="footer" style="background: #000 url('../../gfx/footer-back.png') top center no-repeat;"><div><p><a href="https://www.thegamecreators.com" target="_blank" style="float:none"><img style="float:right;margin-top:2px" src="../../gfx/tgc-logo.png" width="188" height="27" alt="" border="0"></a><br><strong>App Game Kit</strong> &nbsp;&copy; The Game Creators Ltd. All Rights Reserved.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="mailto:agkreports@thegamecreators.com" style="float:none"><font color="FFFFFF">Report an issue</font></a></p></p></div></div><script type="text/javascript">prettyPrint(true);</script></body></html>